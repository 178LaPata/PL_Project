Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> exp
Rule 1     exp -> term
Rule 2     exp -> function
Rule 3     exp -> exp term
Rule 4     exp -> exp function
Rule 5     term -> fact
Rule 6     function -> : NAME ;
Rule 7     function -> : NAME exp ;
Rule 8     fact -> INT
Rule 9     fact -> WORD
Rule 10    fact -> OPR
Rule 11    fact -> COMMENT
Rule 12    fact -> .
Rule 13    fact -> DOTQUOTE
Rule 14    fact -> EMIT
Rule 15    fact -> CHAR
Rule 16    fact -> DUP
Rule 17    fact -> CR
Rule 18    fact -> SPACE
Rule 19    fact -> SPACES

Terminals, with rules where they appear

.                    : 12
:                    : 6 7
;                    : 6 7
CHAR                 : 15
COMMENT              : 11
CR                   : 17
DOTQUOTE             : 13
DUP                  : 16
EMIT                 : 14
INT                  : 8
NAME                 : 6 7
OPR                  : 10
SPACE                : 18
SPACES               : 19
WORD                 : 9
error                : 

Nonterminals, with rules where they appear

exp                  : 3 4 7 0
fact                 : 5
function             : 2 4
term                 : 1 3

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . exp term
    (4) exp -> . exp function
    (5) term -> . fact
    (6) function -> . : NAME ;
    (7) function -> . : NAME exp ;
    (8) fact -> . INT
    (9) fact -> . WORD
    (10) fact -> . OPR
    (11) fact -> . COMMENT
    (12) fact -> . .
    (13) fact -> . DOTQUOTE
    (14) fact -> . EMIT
    (15) fact -> . CHAR
    (16) fact -> . DUP
    (17) fact -> . CR
    (18) fact -> . SPACE
    (19) fact -> . SPACES

    :               shift and go to state 5
    INT             shift and go to state 6
    WORD            shift and go to state 7
    OPR             shift and go to state 8
    COMMENT         shift and go to state 9
    .               shift and go to state 10
    DOTQUOTE        shift and go to state 11
    EMIT            shift and go to state 12
    CHAR            shift and go to state 13
    DUP             shift and go to state 14
    CR              shift and go to state 15
    SPACE           shift and go to state 16
    SPACES          shift and go to state 17

    exp                            shift and go to state 1
    term                           shift and go to state 2
    function                       shift and go to state 3
    fact                           shift and go to state 4

state 1

    (0) S' -> exp .
    (3) exp -> exp . term
    (4) exp -> exp . function
    (5) term -> . fact
    (6) function -> . : NAME ;
    (7) function -> . : NAME exp ;
    (8) fact -> . INT
    (9) fact -> . WORD
    (10) fact -> . OPR
    (11) fact -> . COMMENT
    (12) fact -> . .
    (13) fact -> . DOTQUOTE
    (14) fact -> . EMIT
    (15) fact -> . CHAR
    (16) fact -> . DUP
    (17) fact -> . CR
    (18) fact -> . SPACE
    (19) fact -> . SPACES

    :               shift and go to state 5
    INT             shift and go to state 6
    WORD            shift and go to state 7
    OPR             shift and go to state 8
    COMMENT         shift and go to state 9
    .               shift and go to state 10
    DOTQUOTE        shift and go to state 11
    EMIT            shift and go to state 12
    CHAR            shift and go to state 13
    DUP             shift and go to state 14
    CR              shift and go to state 15
    SPACE           shift and go to state 16
    SPACES          shift and go to state 17

    term                           shift and go to state 18
    function                       shift and go to state 19
    fact                           shift and go to state 4

state 2

    (1) exp -> term .

    :               reduce using rule 1 (exp -> term .)
    INT             reduce using rule 1 (exp -> term .)
    WORD            reduce using rule 1 (exp -> term .)
    OPR             reduce using rule 1 (exp -> term .)
    COMMENT         reduce using rule 1 (exp -> term .)
    .               reduce using rule 1 (exp -> term .)
    DOTQUOTE        reduce using rule 1 (exp -> term .)
    EMIT            reduce using rule 1 (exp -> term .)
    CHAR            reduce using rule 1 (exp -> term .)
    DUP             reduce using rule 1 (exp -> term .)
    CR              reduce using rule 1 (exp -> term .)
    SPACE           reduce using rule 1 (exp -> term .)
    SPACES          reduce using rule 1 (exp -> term .)
    $end            reduce using rule 1 (exp -> term .)
    ;               reduce using rule 1 (exp -> term .)


state 3

    (2) exp -> function .

    :               reduce using rule 2 (exp -> function .)
    INT             reduce using rule 2 (exp -> function .)
    WORD            reduce using rule 2 (exp -> function .)
    OPR             reduce using rule 2 (exp -> function .)
    COMMENT         reduce using rule 2 (exp -> function .)
    .               reduce using rule 2 (exp -> function .)
    DOTQUOTE        reduce using rule 2 (exp -> function .)
    EMIT            reduce using rule 2 (exp -> function .)
    CHAR            reduce using rule 2 (exp -> function .)
    DUP             reduce using rule 2 (exp -> function .)
    CR              reduce using rule 2 (exp -> function .)
    SPACE           reduce using rule 2 (exp -> function .)
    SPACES          reduce using rule 2 (exp -> function .)
    $end            reduce using rule 2 (exp -> function .)
    ;               reduce using rule 2 (exp -> function .)


state 4

    (5) term -> fact .

    :               reduce using rule 5 (term -> fact .)
    INT             reduce using rule 5 (term -> fact .)
    WORD            reduce using rule 5 (term -> fact .)
    OPR             reduce using rule 5 (term -> fact .)
    COMMENT         reduce using rule 5 (term -> fact .)
    .               reduce using rule 5 (term -> fact .)
    DOTQUOTE        reduce using rule 5 (term -> fact .)
    EMIT            reduce using rule 5 (term -> fact .)
    CHAR            reduce using rule 5 (term -> fact .)
    DUP             reduce using rule 5 (term -> fact .)
    CR              reduce using rule 5 (term -> fact .)
    SPACE           reduce using rule 5 (term -> fact .)
    SPACES          reduce using rule 5 (term -> fact .)
    $end            reduce using rule 5 (term -> fact .)
    ;               reduce using rule 5 (term -> fact .)


state 5

    (6) function -> : . NAME ;
    (7) function -> : . NAME exp ;

    NAME            shift and go to state 20


state 6

    (8) fact -> INT .

    :               reduce using rule 8 (fact -> INT .)
    INT             reduce using rule 8 (fact -> INT .)
    WORD            reduce using rule 8 (fact -> INT .)
    OPR             reduce using rule 8 (fact -> INT .)
    COMMENT         reduce using rule 8 (fact -> INT .)
    .               reduce using rule 8 (fact -> INT .)
    DOTQUOTE        reduce using rule 8 (fact -> INT .)
    EMIT            reduce using rule 8 (fact -> INT .)
    CHAR            reduce using rule 8 (fact -> INT .)
    DUP             reduce using rule 8 (fact -> INT .)
    CR              reduce using rule 8 (fact -> INT .)
    SPACE           reduce using rule 8 (fact -> INT .)
    SPACES          reduce using rule 8 (fact -> INT .)
    $end            reduce using rule 8 (fact -> INT .)
    ;               reduce using rule 8 (fact -> INT .)


state 7

    (9) fact -> WORD .

    :               reduce using rule 9 (fact -> WORD .)
    INT             reduce using rule 9 (fact -> WORD .)
    WORD            reduce using rule 9 (fact -> WORD .)
    OPR             reduce using rule 9 (fact -> WORD .)
    COMMENT         reduce using rule 9 (fact -> WORD .)
    .               reduce using rule 9 (fact -> WORD .)
    DOTQUOTE        reduce using rule 9 (fact -> WORD .)
    EMIT            reduce using rule 9 (fact -> WORD .)
    CHAR            reduce using rule 9 (fact -> WORD .)
    DUP             reduce using rule 9 (fact -> WORD .)
    CR              reduce using rule 9 (fact -> WORD .)
    SPACE           reduce using rule 9 (fact -> WORD .)
    SPACES          reduce using rule 9 (fact -> WORD .)
    $end            reduce using rule 9 (fact -> WORD .)
    ;               reduce using rule 9 (fact -> WORD .)


state 8

    (10) fact -> OPR .

    :               reduce using rule 10 (fact -> OPR .)
    INT             reduce using rule 10 (fact -> OPR .)
    WORD            reduce using rule 10 (fact -> OPR .)
    OPR             reduce using rule 10 (fact -> OPR .)
    COMMENT         reduce using rule 10 (fact -> OPR .)
    .               reduce using rule 10 (fact -> OPR .)
    DOTQUOTE        reduce using rule 10 (fact -> OPR .)
    EMIT            reduce using rule 10 (fact -> OPR .)
    CHAR            reduce using rule 10 (fact -> OPR .)
    DUP             reduce using rule 10 (fact -> OPR .)
    CR              reduce using rule 10 (fact -> OPR .)
    SPACE           reduce using rule 10 (fact -> OPR .)
    SPACES          reduce using rule 10 (fact -> OPR .)
    $end            reduce using rule 10 (fact -> OPR .)
    ;               reduce using rule 10 (fact -> OPR .)


state 9

    (11) fact -> COMMENT .

    :               reduce using rule 11 (fact -> COMMENT .)
    INT             reduce using rule 11 (fact -> COMMENT .)
    WORD            reduce using rule 11 (fact -> COMMENT .)
    OPR             reduce using rule 11 (fact -> COMMENT .)
    COMMENT         reduce using rule 11 (fact -> COMMENT .)
    .               reduce using rule 11 (fact -> COMMENT .)
    DOTQUOTE        reduce using rule 11 (fact -> COMMENT .)
    EMIT            reduce using rule 11 (fact -> COMMENT .)
    CHAR            reduce using rule 11 (fact -> COMMENT .)
    DUP             reduce using rule 11 (fact -> COMMENT .)
    CR              reduce using rule 11 (fact -> COMMENT .)
    SPACE           reduce using rule 11 (fact -> COMMENT .)
    SPACES          reduce using rule 11 (fact -> COMMENT .)
    $end            reduce using rule 11 (fact -> COMMENT .)
    ;               reduce using rule 11 (fact -> COMMENT .)


state 10

    (12) fact -> . .

    :               reduce using rule 12 (fact -> . .)
    INT             reduce using rule 12 (fact -> . .)
    WORD            reduce using rule 12 (fact -> . .)
    OPR             reduce using rule 12 (fact -> . .)
    COMMENT         reduce using rule 12 (fact -> . .)
    .               reduce using rule 12 (fact -> . .)
    DOTQUOTE        reduce using rule 12 (fact -> . .)
    EMIT            reduce using rule 12 (fact -> . .)
    CHAR            reduce using rule 12 (fact -> . .)
    DUP             reduce using rule 12 (fact -> . .)
    CR              reduce using rule 12 (fact -> . .)
    SPACE           reduce using rule 12 (fact -> . .)
    SPACES          reduce using rule 12 (fact -> . .)
    $end            reduce using rule 12 (fact -> . .)
    ;               reduce using rule 12 (fact -> . .)


state 11

    (13) fact -> DOTQUOTE .

    :               reduce using rule 13 (fact -> DOTQUOTE .)
    INT             reduce using rule 13 (fact -> DOTQUOTE .)
    WORD            reduce using rule 13 (fact -> DOTQUOTE .)
    OPR             reduce using rule 13 (fact -> DOTQUOTE .)
    COMMENT         reduce using rule 13 (fact -> DOTQUOTE .)
    .               reduce using rule 13 (fact -> DOTQUOTE .)
    DOTQUOTE        reduce using rule 13 (fact -> DOTQUOTE .)
    EMIT            reduce using rule 13 (fact -> DOTQUOTE .)
    CHAR            reduce using rule 13 (fact -> DOTQUOTE .)
    DUP             reduce using rule 13 (fact -> DOTQUOTE .)
    CR              reduce using rule 13 (fact -> DOTQUOTE .)
    SPACE           reduce using rule 13 (fact -> DOTQUOTE .)
    SPACES          reduce using rule 13 (fact -> DOTQUOTE .)
    $end            reduce using rule 13 (fact -> DOTQUOTE .)
    ;               reduce using rule 13 (fact -> DOTQUOTE .)


state 12

    (14) fact -> EMIT .

    :               reduce using rule 14 (fact -> EMIT .)
    INT             reduce using rule 14 (fact -> EMIT .)
    WORD            reduce using rule 14 (fact -> EMIT .)
    OPR             reduce using rule 14 (fact -> EMIT .)
    COMMENT         reduce using rule 14 (fact -> EMIT .)
    .               reduce using rule 14 (fact -> EMIT .)
    DOTQUOTE        reduce using rule 14 (fact -> EMIT .)
    EMIT            reduce using rule 14 (fact -> EMIT .)
    CHAR            reduce using rule 14 (fact -> EMIT .)
    DUP             reduce using rule 14 (fact -> EMIT .)
    CR              reduce using rule 14 (fact -> EMIT .)
    SPACE           reduce using rule 14 (fact -> EMIT .)
    SPACES          reduce using rule 14 (fact -> EMIT .)
    $end            reduce using rule 14 (fact -> EMIT .)
    ;               reduce using rule 14 (fact -> EMIT .)


state 13

    (15) fact -> CHAR .

    :               reduce using rule 15 (fact -> CHAR .)
    INT             reduce using rule 15 (fact -> CHAR .)
    WORD            reduce using rule 15 (fact -> CHAR .)
    OPR             reduce using rule 15 (fact -> CHAR .)
    COMMENT         reduce using rule 15 (fact -> CHAR .)
    .               reduce using rule 15 (fact -> CHAR .)
    DOTQUOTE        reduce using rule 15 (fact -> CHAR .)
    EMIT            reduce using rule 15 (fact -> CHAR .)
    CHAR            reduce using rule 15 (fact -> CHAR .)
    DUP             reduce using rule 15 (fact -> CHAR .)
    CR              reduce using rule 15 (fact -> CHAR .)
    SPACE           reduce using rule 15 (fact -> CHAR .)
    SPACES          reduce using rule 15 (fact -> CHAR .)
    $end            reduce using rule 15 (fact -> CHAR .)
    ;               reduce using rule 15 (fact -> CHAR .)


state 14

    (16) fact -> DUP .

    :               reduce using rule 16 (fact -> DUP .)
    INT             reduce using rule 16 (fact -> DUP .)
    WORD            reduce using rule 16 (fact -> DUP .)
    OPR             reduce using rule 16 (fact -> DUP .)
    COMMENT         reduce using rule 16 (fact -> DUP .)
    .               reduce using rule 16 (fact -> DUP .)
    DOTQUOTE        reduce using rule 16 (fact -> DUP .)
    EMIT            reduce using rule 16 (fact -> DUP .)
    CHAR            reduce using rule 16 (fact -> DUP .)
    DUP             reduce using rule 16 (fact -> DUP .)
    CR              reduce using rule 16 (fact -> DUP .)
    SPACE           reduce using rule 16 (fact -> DUP .)
    SPACES          reduce using rule 16 (fact -> DUP .)
    $end            reduce using rule 16 (fact -> DUP .)
    ;               reduce using rule 16 (fact -> DUP .)


state 15

    (17) fact -> CR .

    :               reduce using rule 17 (fact -> CR .)
    INT             reduce using rule 17 (fact -> CR .)
    WORD            reduce using rule 17 (fact -> CR .)
    OPR             reduce using rule 17 (fact -> CR .)
    COMMENT         reduce using rule 17 (fact -> CR .)
    .               reduce using rule 17 (fact -> CR .)
    DOTQUOTE        reduce using rule 17 (fact -> CR .)
    EMIT            reduce using rule 17 (fact -> CR .)
    CHAR            reduce using rule 17 (fact -> CR .)
    DUP             reduce using rule 17 (fact -> CR .)
    CR              reduce using rule 17 (fact -> CR .)
    SPACE           reduce using rule 17 (fact -> CR .)
    SPACES          reduce using rule 17 (fact -> CR .)
    $end            reduce using rule 17 (fact -> CR .)
    ;               reduce using rule 17 (fact -> CR .)


state 16

    (18) fact -> SPACE .

    :               reduce using rule 18 (fact -> SPACE .)
    INT             reduce using rule 18 (fact -> SPACE .)
    WORD            reduce using rule 18 (fact -> SPACE .)
    OPR             reduce using rule 18 (fact -> SPACE .)
    COMMENT         reduce using rule 18 (fact -> SPACE .)
    .               reduce using rule 18 (fact -> SPACE .)
    DOTQUOTE        reduce using rule 18 (fact -> SPACE .)
    EMIT            reduce using rule 18 (fact -> SPACE .)
    CHAR            reduce using rule 18 (fact -> SPACE .)
    DUP             reduce using rule 18 (fact -> SPACE .)
    CR              reduce using rule 18 (fact -> SPACE .)
    SPACE           reduce using rule 18 (fact -> SPACE .)
    SPACES          reduce using rule 18 (fact -> SPACE .)
    $end            reduce using rule 18 (fact -> SPACE .)
    ;               reduce using rule 18 (fact -> SPACE .)


state 17

    (19) fact -> SPACES .

    :               reduce using rule 19 (fact -> SPACES .)
    INT             reduce using rule 19 (fact -> SPACES .)
    WORD            reduce using rule 19 (fact -> SPACES .)
    OPR             reduce using rule 19 (fact -> SPACES .)
    COMMENT         reduce using rule 19 (fact -> SPACES .)
    .               reduce using rule 19 (fact -> SPACES .)
    DOTQUOTE        reduce using rule 19 (fact -> SPACES .)
    EMIT            reduce using rule 19 (fact -> SPACES .)
    CHAR            reduce using rule 19 (fact -> SPACES .)
    DUP             reduce using rule 19 (fact -> SPACES .)
    CR              reduce using rule 19 (fact -> SPACES .)
    SPACE           reduce using rule 19 (fact -> SPACES .)
    SPACES          reduce using rule 19 (fact -> SPACES .)
    $end            reduce using rule 19 (fact -> SPACES .)
    ;               reduce using rule 19 (fact -> SPACES .)


state 18

    (3) exp -> exp term .

    :               reduce using rule 3 (exp -> exp term .)
    INT             reduce using rule 3 (exp -> exp term .)
    WORD            reduce using rule 3 (exp -> exp term .)
    OPR             reduce using rule 3 (exp -> exp term .)
    COMMENT         reduce using rule 3 (exp -> exp term .)
    .               reduce using rule 3 (exp -> exp term .)
    DOTQUOTE        reduce using rule 3 (exp -> exp term .)
    EMIT            reduce using rule 3 (exp -> exp term .)
    CHAR            reduce using rule 3 (exp -> exp term .)
    DUP             reduce using rule 3 (exp -> exp term .)
    CR              reduce using rule 3 (exp -> exp term .)
    SPACE           reduce using rule 3 (exp -> exp term .)
    SPACES          reduce using rule 3 (exp -> exp term .)
    $end            reduce using rule 3 (exp -> exp term .)
    ;               reduce using rule 3 (exp -> exp term .)


state 19

    (4) exp -> exp function .

    :               reduce using rule 4 (exp -> exp function .)
    INT             reduce using rule 4 (exp -> exp function .)
    WORD            reduce using rule 4 (exp -> exp function .)
    OPR             reduce using rule 4 (exp -> exp function .)
    COMMENT         reduce using rule 4 (exp -> exp function .)
    .               reduce using rule 4 (exp -> exp function .)
    DOTQUOTE        reduce using rule 4 (exp -> exp function .)
    EMIT            reduce using rule 4 (exp -> exp function .)
    CHAR            reduce using rule 4 (exp -> exp function .)
    DUP             reduce using rule 4 (exp -> exp function .)
    CR              reduce using rule 4 (exp -> exp function .)
    SPACE           reduce using rule 4 (exp -> exp function .)
    SPACES          reduce using rule 4 (exp -> exp function .)
    $end            reduce using rule 4 (exp -> exp function .)
    ;               reduce using rule 4 (exp -> exp function .)


state 20

    (6) function -> : NAME . ;
    (7) function -> : NAME . exp ;
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . exp term
    (4) exp -> . exp function
    (5) term -> . fact
    (6) function -> . : NAME ;
    (7) function -> . : NAME exp ;
    (8) fact -> . INT
    (9) fact -> . WORD
    (10) fact -> . OPR
    (11) fact -> . COMMENT
    (12) fact -> . .
    (13) fact -> . DOTQUOTE
    (14) fact -> . EMIT
    (15) fact -> . CHAR
    (16) fact -> . DUP
    (17) fact -> . CR
    (18) fact -> . SPACE
    (19) fact -> . SPACES

    ;               shift and go to state 21
    :               shift and go to state 5
    INT             shift and go to state 6
    WORD            shift and go to state 7
    OPR             shift and go to state 8
    COMMENT         shift and go to state 9
    .               shift and go to state 10
    DOTQUOTE        shift and go to state 11
    EMIT            shift and go to state 12
    CHAR            shift and go to state 13
    DUP             shift and go to state 14
    CR              shift and go to state 15
    SPACE           shift and go to state 16
    SPACES          shift and go to state 17

    exp                            shift and go to state 22
    term                           shift and go to state 2
    function                       shift and go to state 3
    fact                           shift and go to state 4

state 21

    (6) function -> : NAME ; .

    :               reduce using rule 6 (function -> : NAME ; .)
    INT             reduce using rule 6 (function -> : NAME ; .)
    WORD            reduce using rule 6 (function -> : NAME ; .)
    OPR             reduce using rule 6 (function -> : NAME ; .)
    COMMENT         reduce using rule 6 (function -> : NAME ; .)
    .               reduce using rule 6 (function -> : NAME ; .)
    DOTQUOTE        reduce using rule 6 (function -> : NAME ; .)
    EMIT            reduce using rule 6 (function -> : NAME ; .)
    CHAR            reduce using rule 6 (function -> : NAME ; .)
    DUP             reduce using rule 6 (function -> : NAME ; .)
    CR              reduce using rule 6 (function -> : NAME ; .)
    SPACE           reduce using rule 6 (function -> : NAME ; .)
    SPACES          reduce using rule 6 (function -> : NAME ; .)
    $end            reduce using rule 6 (function -> : NAME ; .)
    ;               reduce using rule 6 (function -> : NAME ; .)


state 22

    (7) function -> : NAME exp . ;
    (3) exp -> exp . term
    (4) exp -> exp . function
    (5) term -> . fact
    (6) function -> . : NAME ;
    (7) function -> . : NAME exp ;
    (8) fact -> . INT
    (9) fact -> . WORD
    (10) fact -> . OPR
    (11) fact -> . COMMENT
    (12) fact -> . .
    (13) fact -> . DOTQUOTE
    (14) fact -> . EMIT
    (15) fact -> . CHAR
    (16) fact -> . DUP
    (17) fact -> . CR
    (18) fact -> . SPACE
    (19) fact -> . SPACES

    ;               shift and go to state 23
    :               shift and go to state 5
    INT             shift and go to state 6
    WORD            shift and go to state 7
    OPR             shift and go to state 8
    COMMENT         shift and go to state 9
    .               shift and go to state 10
    DOTQUOTE        shift and go to state 11
    EMIT            shift and go to state 12
    CHAR            shift and go to state 13
    DUP             shift and go to state 14
    CR              shift and go to state 15
    SPACE           shift and go to state 16
    SPACES          shift and go to state 17

    term                           shift and go to state 18
    function                       shift and go to state 19
    fact                           shift and go to state 4

state 23

    (7) function -> : NAME exp ; .

    :               reduce using rule 7 (function -> : NAME exp ; .)
    INT             reduce using rule 7 (function -> : NAME exp ; .)
    WORD            reduce using rule 7 (function -> : NAME exp ; .)
    OPR             reduce using rule 7 (function -> : NAME exp ; .)
    COMMENT         reduce using rule 7 (function -> : NAME exp ; .)
    .               reduce using rule 7 (function -> : NAME exp ; .)
    DOTQUOTE        reduce using rule 7 (function -> : NAME exp ; .)
    EMIT            reduce using rule 7 (function -> : NAME exp ; .)
    CHAR            reduce using rule 7 (function -> : NAME exp ; .)
    DUP             reduce using rule 7 (function -> : NAME exp ; .)
    CR              reduce using rule 7 (function -> : NAME exp ; .)
    SPACE           reduce using rule 7 (function -> : NAME exp ; .)
    SPACES          reduce using rule 7 (function -> : NAME exp ; .)
    $end            reduce using rule 7 (function -> : NAME exp ; .)
    ;               reduce using rule 7 (function -> : NAME exp ; .)

