Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> exp
Rule 1     exp -> term
Rule 2     exp -> function
Rule 3     exp -> conditional
Rule 4     exp -> loop
Rule 5     exp -> variable
Rule 6     exp -> exp term
Rule 7     exp -> exp function
Rule 8     exp -> exp conditional
Rule 9     exp -> exp loop
Rule 10    exp -> exp variable
Rule 11    term -> fact
Rule 12    function -> : NAME ;
Rule 13    function -> : NAME exp ;
Rule 14    conditional -> IF ELSE THEN
Rule 15    conditional -> IF exp ELSE THEN
Rule 16    conditional -> IF ELSE exp THEN
Rule 17    conditional -> IF exp ELSE exp THEN
Rule 18    loop -> DO LOOP
Rule 19    loop -> DO exp LOOP
Rule 20    loop -> DO PLUSLOOP
Rule 21    loop -> DO exp PLUSLOOP
Rule 22    variable -> VARIABLE WORD
Rule 23    variable -> WORD !
Rule 24    variable -> WORD @
Rule 25    fact -> OPR
Rule 26    fact -> INT
Rule 27    fact -> WORD
Rule 28    fact -> COMMENT
Rule 29    fact -> .
Rule 30    fact -> DOTQUOTE
Rule 31    fact -> EMIT
Rule 32    fact -> CHAR
Rule 33    fact -> DUP
Rule 34    fact -> CR
Rule 35    fact -> SPACE
Rule 36    fact -> SPACES
Rule 37    fact -> SWAP
Rule 38    fact -> KEY
Rule 39    fact -> DEPTH
Rule 40    fact -> DROP

Terminals, with rules where they appear

!                    : 23
.                    : 29
:                    : 12 13
;                    : 12 13
@                    : 24
CHAR                 : 32
COMMENT              : 28
CR                   : 34
DEPTH                : 39
DO                   : 18 19 20 21
DOTQUOTE             : 30
DROP                 : 40
DUP                  : 33
ELSE                 : 14 15 16 17
EMIT                 : 31
IF                   : 14 15 16 17
INT                  : 26
KEY                  : 38
LOOP                 : 18 19
NAME                 : 12 13
OPR                  : 25
PLUSLOOP             : 20 21
SPACE                : 35
SPACES               : 36
SWAP                 : 37
THEN                 : 14 15 16 17
VARIABLE             : 22
WORD                 : 22 23 24 27
error                : 

Nonterminals, with rules where they appear

conditional          : 3 8
exp                  : 6 7 8 9 10 13 15 16 17 17 19 21 0
fact                 : 11
function             : 2 7
loop                 : 4 9
term                 : 1 6
variable             : 5 10

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . variable
    (6) exp -> . exp term
    (7) exp -> . exp function
    (8) exp -> . exp conditional
    (9) exp -> . exp loop
    (10) exp -> . exp variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    exp                            shift and go to state 1
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    variable                       shift and go to state 6
    fact                           shift and go to state 7

state 1

    (0) S' -> exp .
    (6) exp -> exp . term
    (7) exp -> exp . function
    (8) exp -> exp . conditional
    (9) exp -> exp . loop
    (10) exp -> exp . variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    term                           shift and go to state 28
    function                       shift and go to state 29
    conditional                    shift and go to state 30
    loop                           shift and go to state 31
    variable                       shift and go to state 32
    fact                           shift and go to state 7

state 2

    (1) exp -> term .

    :               reduce using rule 1 (exp -> term .)
    IF              reduce using rule 1 (exp -> term .)
    DO              reduce using rule 1 (exp -> term .)
    VARIABLE        reduce using rule 1 (exp -> term .)
    WORD            reduce using rule 1 (exp -> term .)
    OPR             reduce using rule 1 (exp -> term .)
    INT             reduce using rule 1 (exp -> term .)
    COMMENT         reduce using rule 1 (exp -> term .)
    .               reduce using rule 1 (exp -> term .)
    DOTQUOTE        reduce using rule 1 (exp -> term .)
    EMIT            reduce using rule 1 (exp -> term .)
    CHAR            reduce using rule 1 (exp -> term .)
    DUP             reduce using rule 1 (exp -> term .)
    CR              reduce using rule 1 (exp -> term .)
    SPACE           reduce using rule 1 (exp -> term .)
    SPACES          reduce using rule 1 (exp -> term .)
    SWAP            reduce using rule 1 (exp -> term .)
    KEY             reduce using rule 1 (exp -> term .)
    DEPTH           reduce using rule 1 (exp -> term .)
    DROP            reduce using rule 1 (exp -> term .)
    $end            reduce using rule 1 (exp -> term .)
    ELSE            reduce using rule 1 (exp -> term .)
    LOOP            reduce using rule 1 (exp -> term .)
    PLUSLOOP        reduce using rule 1 (exp -> term .)
    ;               reduce using rule 1 (exp -> term .)
    THEN            reduce using rule 1 (exp -> term .)


state 3

    (2) exp -> function .

    :               reduce using rule 2 (exp -> function .)
    IF              reduce using rule 2 (exp -> function .)
    DO              reduce using rule 2 (exp -> function .)
    VARIABLE        reduce using rule 2 (exp -> function .)
    WORD            reduce using rule 2 (exp -> function .)
    OPR             reduce using rule 2 (exp -> function .)
    INT             reduce using rule 2 (exp -> function .)
    COMMENT         reduce using rule 2 (exp -> function .)
    .               reduce using rule 2 (exp -> function .)
    DOTQUOTE        reduce using rule 2 (exp -> function .)
    EMIT            reduce using rule 2 (exp -> function .)
    CHAR            reduce using rule 2 (exp -> function .)
    DUP             reduce using rule 2 (exp -> function .)
    CR              reduce using rule 2 (exp -> function .)
    SPACE           reduce using rule 2 (exp -> function .)
    SPACES          reduce using rule 2 (exp -> function .)
    SWAP            reduce using rule 2 (exp -> function .)
    KEY             reduce using rule 2 (exp -> function .)
    DEPTH           reduce using rule 2 (exp -> function .)
    DROP            reduce using rule 2 (exp -> function .)
    $end            reduce using rule 2 (exp -> function .)
    ELSE            reduce using rule 2 (exp -> function .)
    LOOP            reduce using rule 2 (exp -> function .)
    PLUSLOOP        reduce using rule 2 (exp -> function .)
    ;               reduce using rule 2 (exp -> function .)
    THEN            reduce using rule 2 (exp -> function .)


state 4

    (3) exp -> conditional .

    :               reduce using rule 3 (exp -> conditional .)
    IF              reduce using rule 3 (exp -> conditional .)
    DO              reduce using rule 3 (exp -> conditional .)
    VARIABLE        reduce using rule 3 (exp -> conditional .)
    WORD            reduce using rule 3 (exp -> conditional .)
    OPR             reduce using rule 3 (exp -> conditional .)
    INT             reduce using rule 3 (exp -> conditional .)
    COMMENT         reduce using rule 3 (exp -> conditional .)
    .               reduce using rule 3 (exp -> conditional .)
    DOTQUOTE        reduce using rule 3 (exp -> conditional .)
    EMIT            reduce using rule 3 (exp -> conditional .)
    CHAR            reduce using rule 3 (exp -> conditional .)
    DUP             reduce using rule 3 (exp -> conditional .)
    CR              reduce using rule 3 (exp -> conditional .)
    SPACE           reduce using rule 3 (exp -> conditional .)
    SPACES          reduce using rule 3 (exp -> conditional .)
    SWAP            reduce using rule 3 (exp -> conditional .)
    KEY             reduce using rule 3 (exp -> conditional .)
    DEPTH           reduce using rule 3 (exp -> conditional .)
    DROP            reduce using rule 3 (exp -> conditional .)
    $end            reduce using rule 3 (exp -> conditional .)
    ELSE            reduce using rule 3 (exp -> conditional .)
    LOOP            reduce using rule 3 (exp -> conditional .)
    PLUSLOOP        reduce using rule 3 (exp -> conditional .)
    ;               reduce using rule 3 (exp -> conditional .)
    THEN            reduce using rule 3 (exp -> conditional .)


state 5

    (4) exp -> loop .

    :               reduce using rule 4 (exp -> loop .)
    IF              reduce using rule 4 (exp -> loop .)
    DO              reduce using rule 4 (exp -> loop .)
    VARIABLE        reduce using rule 4 (exp -> loop .)
    WORD            reduce using rule 4 (exp -> loop .)
    OPR             reduce using rule 4 (exp -> loop .)
    INT             reduce using rule 4 (exp -> loop .)
    COMMENT         reduce using rule 4 (exp -> loop .)
    .               reduce using rule 4 (exp -> loop .)
    DOTQUOTE        reduce using rule 4 (exp -> loop .)
    EMIT            reduce using rule 4 (exp -> loop .)
    CHAR            reduce using rule 4 (exp -> loop .)
    DUP             reduce using rule 4 (exp -> loop .)
    CR              reduce using rule 4 (exp -> loop .)
    SPACE           reduce using rule 4 (exp -> loop .)
    SPACES          reduce using rule 4 (exp -> loop .)
    SWAP            reduce using rule 4 (exp -> loop .)
    KEY             reduce using rule 4 (exp -> loop .)
    DEPTH           reduce using rule 4 (exp -> loop .)
    DROP            reduce using rule 4 (exp -> loop .)
    $end            reduce using rule 4 (exp -> loop .)
    ELSE            reduce using rule 4 (exp -> loop .)
    LOOP            reduce using rule 4 (exp -> loop .)
    PLUSLOOP        reduce using rule 4 (exp -> loop .)
    ;               reduce using rule 4 (exp -> loop .)
    THEN            reduce using rule 4 (exp -> loop .)


state 6

    (5) exp -> variable .

    :               reduce using rule 5 (exp -> variable .)
    IF              reduce using rule 5 (exp -> variable .)
    DO              reduce using rule 5 (exp -> variable .)
    VARIABLE        reduce using rule 5 (exp -> variable .)
    WORD            reduce using rule 5 (exp -> variable .)
    OPR             reduce using rule 5 (exp -> variable .)
    INT             reduce using rule 5 (exp -> variable .)
    COMMENT         reduce using rule 5 (exp -> variable .)
    .               reduce using rule 5 (exp -> variable .)
    DOTQUOTE        reduce using rule 5 (exp -> variable .)
    EMIT            reduce using rule 5 (exp -> variable .)
    CHAR            reduce using rule 5 (exp -> variable .)
    DUP             reduce using rule 5 (exp -> variable .)
    CR              reduce using rule 5 (exp -> variable .)
    SPACE           reduce using rule 5 (exp -> variable .)
    SPACES          reduce using rule 5 (exp -> variable .)
    SWAP            reduce using rule 5 (exp -> variable .)
    KEY             reduce using rule 5 (exp -> variable .)
    DEPTH           reduce using rule 5 (exp -> variable .)
    DROP            reduce using rule 5 (exp -> variable .)
    $end            reduce using rule 5 (exp -> variable .)
    ELSE            reduce using rule 5 (exp -> variable .)
    LOOP            reduce using rule 5 (exp -> variable .)
    PLUSLOOP        reduce using rule 5 (exp -> variable .)
    ;               reduce using rule 5 (exp -> variable .)
    THEN            reduce using rule 5 (exp -> variable .)


state 7

    (11) term -> fact .

    :               reduce using rule 11 (term -> fact .)
    IF              reduce using rule 11 (term -> fact .)
    DO              reduce using rule 11 (term -> fact .)
    VARIABLE        reduce using rule 11 (term -> fact .)
    WORD            reduce using rule 11 (term -> fact .)
    OPR             reduce using rule 11 (term -> fact .)
    INT             reduce using rule 11 (term -> fact .)
    COMMENT         reduce using rule 11 (term -> fact .)
    .               reduce using rule 11 (term -> fact .)
    DOTQUOTE        reduce using rule 11 (term -> fact .)
    EMIT            reduce using rule 11 (term -> fact .)
    CHAR            reduce using rule 11 (term -> fact .)
    DUP             reduce using rule 11 (term -> fact .)
    CR              reduce using rule 11 (term -> fact .)
    SPACE           reduce using rule 11 (term -> fact .)
    SPACES          reduce using rule 11 (term -> fact .)
    SWAP            reduce using rule 11 (term -> fact .)
    KEY             reduce using rule 11 (term -> fact .)
    DEPTH           reduce using rule 11 (term -> fact .)
    DROP            reduce using rule 11 (term -> fact .)
    $end            reduce using rule 11 (term -> fact .)
    ELSE            reduce using rule 11 (term -> fact .)
    LOOP            reduce using rule 11 (term -> fact .)
    PLUSLOOP        reduce using rule 11 (term -> fact .)
    ;               reduce using rule 11 (term -> fact .)
    THEN            reduce using rule 11 (term -> fact .)


state 8

    (12) function -> : . NAME ;
    (13) function -> : . NAME exp ;

    NAME            shift and go to state 33


state 9

    (14) conditional -> IF . ELSE THEN
    (15) conditional -> IF . exp ELSE THEN
    (16) conditional -> IF . ELSE exp THEN
    (17) conditional -> IF . exp ELSE exp THEN
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . variable
    (6) exp -> . exp term
    (7) exp -> . exp function
    (8) exp -> . exp conditional
    (9) exp -> . exp loop
    (10) exp -> . exp variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    ELSE            shift and go to state 34
    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    exp                            shift and go to state 35
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    variable                       shift and go to state 6
    fact                           shift and go to state 7

state 10

    (18) loop -> DO . LOOP
    (19) loop -> DO . exp LOOP
    (20) loop -> DO . PLUSLOOP
    (21) loop -> DO . exp PLUSLOOP
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . variable
    (6) exp -> . exp term
    (7) exp -> . exp function
    (8) exp -> . exp conditional
    (9) exp -> . exp loop
    (10) exp -> . exp variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    LOOP            shift and go to state 36
    PLUSLOOP        shift and go to state 38
    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    exp                            shift and go to state 37
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    variable                       shift and go to state 6
    fact                           shift and go to state 7

state 11

    (22) variable -> VARIABLE . WORD

    WORD            shift and go to state 39


state 12

    (23) variable -> WORD . !
    (24) variable -> WORD . @
    (27) fact -> WORD .

    !               shift and go to state 40
    @               shift and go to state 41
    :               reduce using rule 27 (fact -> WORD .)
    IF              reduce using rule 27 (fact -> WORD .)
    DO              reduce using rule 27 (fact -> WORD .)
    VARIABLE        reduce using rule 27 (fact -> WORD .)
    WORD            reduce using rule 27 (fact -> WORD .)
    OPR             reduce using rule 27 (fact -> WORD .)
    INT             reduce using rule 27 (fact -> WORD .)
    COMMENT         reduce using rule 27 (fact -> WORD .)
    .               reduce using rule 27 (fact -> WORD .)
    DOTQUOTE        reduce using rule 27 (fact -> WORD .)
    EMIT            reduce using rule 27 (fact -> WORD .)
    CHAR            reduce using rule 27 (fact -> WORD .)
    DUP             reduce using rule 27 (fact -> WORD .)
    CR              reduce using rule 27 (fact -> WORD .)
    SPACE           reduce using rule 27 (fact -> WORD .)
    SPACES          reduce using rule 27 (fact -> WORD .)
    SWAP            reduce using rule 27 (fact -> WORD .)
    KEY             reduce using rule 27 (fact -> WORD .)
    DEPTH           reduce using rule 27 (fact -> WORD .)
    DROP            reduce using rule 27 (fact -> WORD .)
    $end            reduce using rule 27 (fact -> WORD .)
    ELSE            reduce using rule 27 (fact -> WORD .)
    LOOP            reduce using rule 27 (fact -> WORD .)
    PLUSLOOP        reduce using rule 27 (fact -> WORD .)
    ;               reduce using rule 27 (fact -> WORD .)
    THEN            reduce using rule 27 (fact -> WORD .)


state 13

    (25) fact -> OPR .

    :               reduce using rule 25 (fact -> OPR .)
    IF              reduce using rule 25 (fact -> OPR .)
    DO              reduce using rule 25 (fact -> OPR .)
    VARIABLE        reduce using rule 25 (fact -> OPR .)
    WORD            reduce using rule 25 (fact -> OPR .)
    OPR             reduce using rule 25 (fact -> OPR .)
    INT             reduce using rule 25 (fact -> OPR .)
    COMMENT         reduce using rule 25 (fact -> OPR .)
    .               reduce using rule 25 (fact -> OPR .)
    DOTQUOTE        reduce using rule 25 (fact -> OPR .)
    EMIT            reduce using rule 25 (fact -> OPR .)
    CHAR            reduce using rule 25 (fact -> OPR .)
    DUP             reduce using rule 25 (fact -> OPR .)
    CR              reduce using rule 25 (fact -> OPR .)
    SPACE           reduce using rule 25 (fact -> OPR .)
    SPACES          reduce using rule 25 (fact -> OPR .)
    SWAP            reduce using rule 25 (fact -> OPR .)
    KEY             reduce using rule 25 (fact -> OPR .)
    DEPTH           reduce using rule 25 (fact -> OPR .)
    DROP            reduce using rule 25 (fact -> OPR .)
    $end            reduce using rule 25 (fact -> OPR .)
    ELSE            reduce using rule 25 (fact -> OPR .)
    LOOP            reduce using rule 25 (fact -> OPR .)
    PLUSLOOP        reduce using rule 25 (fact -> OPR .)
    ;               reduce using rule 25 (fact -> OPR .)
    THEN            reduce using rule 25 (fact -> OPR .)


state 14

    (26) fact -> INT .

    :               reduce using rule 26 (fact -> INT .)
    IF              reduce using rule 26 (fact -> INT .)
    DO              reduce using rule 26 (fact -> INT .)
    VARIABLE        reduce using rule 26 (fact -> INT .)
    WORD            reduce using rule 26 (fact -> INT .)
    OPR             reduce using rule 26 (fact -> INT .)
    INT             reduce using rule 26 (fact -> INT .)
    COMMENT         reduce using rule 26 (fact -> INT .)
    .               reduce using rule 26 (fact -> INT .)
    DOTQUOTE        reduce using rule 26 (fact -> INT .)
    EMIT            reduce using rule 26 (fact -> INT .)
    CHAR            reduce using rule 26 (fact -> INT .)
    DUP             reduce using rule 26 (fact -> INT .)
    CR              reduce using rule 26 (fact -> INT .)
    SPACE           reduce using rule 26 (fact -> INT .)
    SPACES          reduce using rule 26 (fact -> INT .)
    SWAP            reduce using rule 26 (fact -> INT .)
    KEY             reduce using rule 26 (fact -> INT .)
    DEPTH           reduce using rule 26 (fact -> INT .)
    DROP            reduce using rule 26 (fact -> INT .)
    $end            reduce using rule 26 (fact -> INT .)
    ELSE            reduce using rule 26 (fact -> INT .)
    LOOP            reduce using rule 26 (fact -> INT .)
    PLUSLOOP        reduce using rule 26 (fact -> INT .)
    ;               reduce using rule 26 (fact -> INT .)
    THEN            reduce using rule 26 (fact -> INT .)


state 15

    (28) fact -> COMMENT .

    :               reduce using rule 28 (fact -> COMMENT .)
    IF              reduce using rule 28 (fact -> COMMENT .)
    DO              reduce using rule 28 (fact -> COMMENT .)
    VARIABLE        reduce using rule 28 (fact -> COMMENT .)
    WORD            reduce using rule 28 (fact -> COMMENT .)
    OPR             reduce using rule 28 (fact -> COMMENT .)
    INT             reduce using rule 28 (fact -> COMMENT .)
    COMMENT         reduce using rule 28 (fact -> COMMENT .)
    .               reduce using rule 28 (fact -> COMMENT .)
    DOTQUOTE        reduce using rule 28 (fact -> COMMENT .)
    EMIT            reduce using rule 28 (fact -> COMMENT .)
    CHAR            reduce using rule 28 (fact -> COMMENT .)
    DUP             reduce using rule 28 (fact -> COMMENT .)
    CR              reduce using rule 28 (fact -> COMMENT .)
    SPACE           reduce using rule 28 (fact -> COMMENT .)
    SPACES          reduce using rule 28 (fact -> COMMENT .)
    SWAP            reduce using rule 28 (fact -> COMMENT .)
    KEY             reduce using rule 28 (fact -> COMMENT .)
    DEPTH           reduce using rule 28 (fact -> COMMENT .)
    DROP            reduce using rule 28 (fact -> COMMENT .)
    $end            reduce using rule 28 (fact -> COMMENT .)
    ELSE            reduce using rule 28 (fact -> COMMENT .)
    LOOP            reduce using rule 28 (fact -> COMMENT .)
    PLUSLOOP        reduce using rule 28 (fact -> COMMENT .)
    ;               reduce using rule 28 (fact -> COMMENT .)
    THEN            reduce using rule 28 (fact -> COMMENT .)


state 16

    (29) fact -> . .

    :               reduce using rule 29 (fact -> . .)
    IF              reduce using rule 29 (fact -> . .)
    DO              reduce using rule 29 (fact -> . .)
    VARIABLE        reduce using rule 29 (fact -> . .)
    WORD            reduce using rule 29 (fact -> . .)
    OPR             reduce using rule 29 (fact -> . .)
    INT             reduce using rule 29 (fact -> . .)
    COMMENT         reduce using rule 29 (fact -> . .)
    .               reduce using rule 29 (fact -> . .)
    DOTQUOTE        reduce using rule 29 (fact -> . .)
    EMIT            reduce using rule 29 (fact -> . .)
    CHAR            reduce using rule 29 (fact -> . .)
    DUP             reduce using rule 29 (fact -> . .)
    CR              reduce using rule 29 (fact -> . .)
    SPACE           reduce using rule 29 (fact -> . .)
    SPACES          reduce using rule 29 (fact -> . .)
    SWAP            reduce using rule 29 (fact -> . .)
    KEY             reduce using rule 29 (fact -> . .)
    DEPTH           reduce using rule 29 (fact -> . .)
    DROP            reduce using rule 29 (fact -> . .)
    $end            reduce using rule 29 (fact -> . .)
    ELSE            reduce using rule 29 (fact -> . .)
    LOOP            reduce using rule 29 (fact -> . .)
    PLUSLOOP        reduce using rule 29 (fact -> . .)
    ;               reduce using rule 29 (fact -> . .)
    THEN            reduce using rule 29 (fact -> . .)


state 17

    (30) fact -> DOTQUOTE .

    :               reduce using rule 30 (fact -> DOTQUOTE .)
    IF              reduce using rule 30 (fact -> DOTQUOTE .)
    DO              reduce using rule 30 (fact -> DOTQUOTE .)
    VARIABLE        reduce using rule 30 (fact -> DOTQUOTE .)
    WORD            reduce using rule 30 (fact -> DOTQUOTE .)
    OPR             reduce using rule 30 (fact -> DOTQUOTE .)
    INT             reduce using rule 30 (fact -> DOTQUOTE .)
    COMMENT         reduce using rule 30 (fact -> DOTQUOTE .)
    .               reduce using rule 30 (fact -> DOTQUOTE .)
    DOTQUOTE        reduce using rule 30 (fact -> DOTQUOTE .)
    EMIT            reduce using rule 30 (fact -> DOTQUOTE .)
    CHAR            reduce using rule 30 (fact -> DOTQUOTE .)
    DUP             reduce using rule 30 (fact -> DOTQUOTE .)
    CR              reduce using rule 30 (fact -> DOTQUOTE .)
    SPACE           reduce using rule 30 (fact -> DOTQUOTE .)
    SPACES          reduce using rule 30 (fact -> DOTQUOTE .)
    SWAP            reduce using rule 30 (fact -> DOTQUOTE .)
    KEY             reduce using rule 30 (fact -> DOTQUOTE .)
    DEPTH           reduce using rule 30 (fact -> DOTQUOTE .)
    DROP            reduce using rule 30 (fact -> DOTQUOTE .)
    $end            reduce using rule 30 (fact -> DOTQUOTE .)
    ELSE            reduce using rule 30 (fact -> DOTQUOTE .)
    LOOP            reduce using rule 30 (fact -> DOTQUOTE .)
    PLUSLOOP        reduce using rule 30 (fact -> DOTQUOTE .)
    ;               reduce using rule 30 (fact -> DOTQUOTE .)
    THEN            reduce using rule 30 (fact -> DOTQUOTE .)


state 18

    (31) fact -> EMIT .

    :               reduce using rule 31 (fact -> EMIT .)
    IF              reduce using rule 31 (fact -> EMIT .)
    DO              reduce using rule 31 (fact -> EMIT .)
    VARIABLE        reduce using rule 31 (fact -> EMIT .)
    WORD            reduce using rule 31 (fact -> EMIT .)
    OPR             reduce using rule 31 (fact -> EMIT .)
    INT             reduce using rule 31 (fact -> EMIT .)
    COMMENT         reduce using rule 31 (fact -> EMIT .)
    .               reduce using rule 31 (fact -> EMIT .)
    DOTQUOTE        reduce using rule 31 (fact -> EMIT .)
    EMIT            reduce using rule 31 (fact -> EMIT .)
    CHAR            reduce using rule 31 (fact -> EMIT .)
    DUP             reduce using rule 31 (fact -> EMIT .)
    CR              reduce using rule 31 (fact -> EMIT .)
    SPACE           reduce using rule 31 (fact -> EMIT .)
    SPACES          reduce using rule 31 (fact -> EMIT .)
    SWAP            reduce using rule 31 (fact -> EMIT .)
    KEY             reduce using rule 31 (fact -> EMIT .)
    DEPTH           reduce using rule 31 (fact -> EMIT .)
    DROP            reduce using rule 31 (fact -> EMIT .)
    $end            reduce using rule 31 (fact -> EMIT .)
    ELSE            reduce using rule 31 (fact -> EMIT .)
    LOOP            reduce using rule 31 (fact -> EMIT .)
    PLUSLOOP        reduce using rule 31 (fact -> EMIT .)
    ;               reduce using rule 31 (fact -> EMIT .)
    THEN            reduce using rule 31 (fact -> EMIT .)


state 19

    (32) fact -> CHAR .

    :               reduce using rule 32 (fact -> CHAR .)
    IF              reduce using rule 32 (fact -> CHAR .)
    DO              reduce using rule 32 (fact -> CHAR .)
    VARIABLE        reduce using rule 32 (fact -> CHAR .)
    WORD            reduce using rule 32 (fact -> CHAR .)
    OPR             reduce using rule 32 (fact -> CHAR .)
    INT             reduce using rule 32 (fact -> CHAR .)
    COMMENT         reduce using rule 32 (fact -> CHAR .)
    .               reduce using rule 32 (fact -> CHAR .)
    DOTQUOTE        reduce using rule 32 (fact -> CHAR .)
    EMIT            reduce using rule 32 (fact -> CHAR .)
    CHAR            reduce using rule 32 (fact -> CHAR .)
    DUP             reduce using rule 32 (fact -> CHAR .)
    CR              reduce using rule 32 (fact -> CHAR .)
    SPACE           reduce using rule 32 (fact -> CHAR .)
    SPACES          reduce using rule 32 (fact -> CHAR .)
    SWAP            reduce using rule 32 (fact -> CHAR .)
    KEY             reduce using rule 32 (fact -> CHAR .)
    DEPTH           reduce using rule 32 (fact -> CHAR .)
    DROP            reduce using rule 32 (fact -> CHAR .)
    $end            reduce using rule 32 (fact -> CHAR .)
    ELSE            reduce using rule 32 (fact -> CHAR .)
    LOOP            reduce using rule 32 (fact -> CHAR .)
    PLUSLOOP        reduce using rule 32 (fact -> CHAR .)
    ;               reduce using rule 32 (fact -> CHAR .)
    THEN            reduce using rule 32 (fact -> CHAR .)


state 20

    (33) fact -> DUP .

    :               reduce using rule 33 (fact -> DUP .)
    IF              reduce using rule 33 (fact -> DUP .)
    DO              reduce using rule 33 (fact -> DUP .)
    VARIABLE        reduce using rule 33 (fact -> DUP .)
    WORD            reduce using rule 33 (fact -> DUP .)
    OPR             reduce using rule 33 (fact -> DUP .)
    INT             reduce using rule 33 (fact -> DUP .)
    COMMENT         reduce using rule 33 (fact -> DUP .)
    .               reduce using rule 33 (fact -> DUP .)
    DOTQUOTE        reduce using rule 33 (fact -> DUP .)
    EMIT            reduce using rule 33 (fact -> DUP .)
    CHAR            reduce using rule 33 (fact -> DUP .)
    DUP             reduce using rule 33 (fact -> DUP .)
    CR              reduce using rule 33 (fact -> DUP .)
    SPACE           reduce using rule 33 (fact -> DUP .)
    SPACES          reduce using rule 33 (fact -> DUP .)
    SWAP            reduce using rule 33 (fact -> DUP .)
    KEY             reduce using rule 33 (fact -> DUP .)
    DEPTH           reduce using rule 33 (fact -> DUP .)
    DROP            reduce using rule 33 (fact -> DUP .)
    $end            reduce using rule 33 (fact -> DUP .)
    ELSE            reduce using rule 33 (fact -> DUP .)
    LOOP            reduce using rule 33 (fact -> DUP .)
    PLUSLOOP        reduce using rule 33 (fact -> DUP .)
    ;               reduce using rule 33 (fact -> DUP .)
    THEN            reduce using rule 33 (fact -> DUP .)


state 21

    (34) fact -> CR .

    :               reduce using rule 34 (fact -> CR .)
    IF              reduce using rule 34 (fact -> CR .)
    DO              reduce using rule 34 (fact -> CR .)
    VARIABLE        reduce using rule 34 (fact -> CR .)
    WORD            reduce using rule 34 (fact -> CR .)
    OPR             reduce using rule 34 (fact -> CR .)
    INT             reduce using rule 34 (fact -> CR .)
    COMMENT         reduce using rule 34 (fact -> CR .)
    .               reduce using rule 34 (fact -> CR .)
    DOTQUOTE        reduce using rule 34 (fact -> CR .)
    EMIT            reduce using rule 34 (fact -> CR .)
    CHAR            reduce using rule 34 (fact -> CR .)
    DUP             reduce using rule 34 (fact -> CR .)
    CR              reduce using rule 34 (fact -> CR .)
    SPACE           reduce using rule 34 (fact -> CR .)
    SPACES          reduce using rule 34 (fact -> CR .)
    SWAP            reduce using rule 34 (fact -> CR .)
    KEY             reduce using rule 34 (fact -> CR .)
    DEPTH           reduce using rule 34 (fact -> CR .)
    DROP            reduce using rule 34 (fact -> CR .)
    $end            reduce using rule 34 (fact -> CR .)
    ELSE            reduce using rule 34 (fact -> CR .)
    LOOP            reduce using rule 34 (fact -> CR .)
    PLUSLOOP        reduce using rule 34 (fact -> CR .)
    ;               reduce using rule 34 (fact -> CR .)
    THEN            reduce using rule 34 (fact -> CR .)


state 22

    (35) fact -> SPACE .

    :               reduce using rule 35 (fact -> SPACE .)
    IF              reduce using rule 35 (fact -> SPACE .)
    DO              reduce using rule 35 (fact -> SPACE .)
    VARIABLE        reduce using rule 35 (fact -> SPACE .)
    WORD            reduce using rule 35 (fact -> SPACE .)
    OPR             reduce using rule 35 (fact -> SPACE .)
    INT             reduce using rule 35 (fact -> SPACE .)
    COMMENT         reduce using rule 35 (fact -> SPACE .)
    .               reduce using rule 35 (fact -> SPACE .)
    DOTQUOTE        reduce using rule 35 (fact -> SPACE .)
    EMIT            reduce using rule 35 (fact -> SPACE .)
    CHAR            reduce using rule 35 (fact -> SPACE .)
    DUP             reduce using rule 35 (fact -> SPACE .)
    CR              reduce using rule 35 (fact -> SPACE .)
    SPACE           reduce using rule 35 (fact -> SPACE .)
    SPACES          reduce using rule 35 (fact -> SPACE .)
    SWAP            reduce using rule 35 (fact -> SPACE .)
    KEY             reduce using rule 35 (fact -> SPACE .)
    DEPTH           reduce using rule 35 (fact -> SPACE .)
    DROP            reduce using rule 35 (fact -> SPACE .)
    $end            reduce using rule 35 (fact -> SPACE .)
    ELSE            reduce using rule 35 (fact -> SPACE .)
    LOOP            reduce using rule 35 (fact -> SPACE .)
    PLUSLOOP        reduce using rule 35 (fact -> SPACE .)
    ;               reduce using rule 35 (fact -> SPACE .)
    THEN            reduce using rule 35 (fact -> SPACE .)


state 23

    (36) fact -> SPACES .

    :               reduce using rule 36 (fact -> SPACES .)
    IF              reduce using rule 36 (fact -> SPACES .)
    DO              reduce using rule 36 (fact -> SPACES .)
    VARIABLE        reduce using rule 36 (fact -> SPACES .)
    WORD            reduce using rule 36 (fact -> SPACES .)
    OPR             reduce using rule 36 (fact -> SPACES .)
    INT             reduce using rule 36 (fact -> SPACES .)
    COMMENT         reduce using rule 36 (fact -> SPACES .)
    .               reduce using rule 36 (fact -> SPACES .)
    DOTQUOTE        reduce using rule 36 (fact -> SPACES .)
    EMIT            reduce using rule 36 (fact -> SPACES .)
    CHAR            reduce using rule 36 (fact -> SPACES .)
    DUP             reduce using rule 36 (fact -> SPACES .)
    CR              reduce using rule 36 (fact -> SPACES .)
    SPACE           reduce using rule 36 (fact -> SPACES .)
    SPACES          reduce using rule 36 (fact -> SPACES .)
    SWAP            reduce using rule 36 (fact -> SPACES .)
    KEY             reduce using rule 36 (fact -> SPACES .)
    DEPTH           reduce using rule 36 (fact -> SPACES .)
    DROP            reduce using rule 36 (fact -> SPACES .)
    $end            reduce using rule 36 (fact -> SPACES .)
    ELSE            reduce using rule 36 (fact -> SPACES .)
    LOOP            reduce using rule 36 (fact -> SPACES .)
    PLUSLOOP        reduce using rule 36 (fact -> SPACES .)
    ;               reduce using rule 36 (fact -> SPACES .)
    THEN            reduce using rule 36 (fact -> SPACES .)


state 24

    (37) fact -> SWAP .

    :               reduce using rule 37 (fact -> SWAP .)
    IF              reduce using rule 37 (fact -> SWAP .)
    DO              reduce using rule 37 (fact -> SWAP .)
    VARIABLE        reduce using rule 37 (fact -> SWAP .)
    WORD            reduce using rule 37 (fact -> SWAP .)
    OPR             reduce using rule 37 (fact -> SWAP .)
    INT             reduce using rule 37 (fact -> SWAP .)
    COMMENT         reduce using rule 37 (fact -> SWAP .)
    .               reduce using rule 37 (fact -> SWAP .)
    DOTQUOTE        reduce using rule 37 (fact -> SWAP .)
    EMIT            reduce using rule 37 (fact -> SWAP .)
    CHAR            reduce using rule 37 (fact -> SWAP .)
    DUP             reduce using rule 37 (fact -> SWAP .)
    CR              reduce using rule 37 (fact -> SWAP .)
    SPACE           reduce using rule 37 (fact -> SWAP .)
    SPACES          reduce using rule 37 (fact -> SWAP .)
    SWAP            reduce using rule 37 (fact -> SWAP .)
    KEY             reduce using rule 37 (fact -> SWAP .)
    DEPTH           reduce using rule 37 (fact -> SWAP .)
    DROP            reduce using rule 37 (fact -> SWAP .)
    $end            reduce using rule 37 (fact -> SWAP .)
    ELSE            reduce using rule 37 (fact -> SWAP .)
    LOOP            reduce using rule 37 (fact -> SWAP .)
    PLUSLOOP        reduce using rule 37 (fact -> SWAP .)
    ;               reduce using rule 37 (fact -> SWAP .)
    THEN            reduce using rule 37 (fact -> SWAP .)


state 25

    (38) fact -> KEY .

    :               reduce using rule 38 (fact -> KEY .)
    IF              reduce using rule 38 (fact -> KEY .)
    DO              reduce using rule 38 (fact -> KEY .)
    VARIABLE        reduce using rule 38 (fact -> KEY .)
    WORD            reduce using rule 38 (fact -> KEY .)
    OPR             reduce using rule 38 (fact -> KEY .)
    INT             reduce using rule 38 (fact -> KEY .)
    COMMENT         reduce using rule 38 (fact -> KEY .)
    .               reduce using rule 38 (fact -> KEY .)
    DOTQUOTE        reduce using rule 38 (fact -> KEY .)
    EMIT            reduce using rule 38 (fact -> KEY .)
    CHAR            reduce using rule 38 (fact -> KEY .)
    DUP             reduce using rule 38 (fact -> KEY .)
    CR              reduce using rule 38 (fact -> KEY .)
    SPACE           reduce using rule 38 (fact -> KEY .)
    SPACES          reduce using rule 38 (fact -> KEY .)
    SWAP            reduce using rule 38 (fact -> KEY .)
    KEY             reduce using rule 38 (fact -> KEY .)
    DEPTH           reduce using rule 38 (fact -> KEY .)
    DROP            reduce using rule 38 (fact -> KEY .)
    $end            reduce using rule 38 (fact -> KEY .)
    ELSE            reduce using rule 38 (fact -> KEY .)
    LOOP            reduce using rule 38 (fact -> KEY .)
    PLUSLOOP        reduce using rule 38 (fact -> KEY .)
    ;               reduce using rule 38 (fact -> KEY .)
    THEN            reduce using rule 38 (fact -> KEY .)


state 26

    (39) fact -> DEPTH .

    :               reduce using rule 39 (fact -> DEPTH .)
    IF              reduce using rule 39 (fact -> DEPTH .)
    DO              reduce using rule 39 (fact -> DEPTH .)
    VARIABLE        reduce using rule 39 (fact -> DEPTH .)
    WORD            reduce using rule 39 (fact -> DEPTH .)
    OPR             reduce using rule 39 (fact -> DEPTH .)
    INT             reduce using rule 39 (fact -> DEPTH .)
    COMMENT         reduce using rule 39 (fact -> DEPTH .)
    .               reduce using rule 39 (fact -> DEPTH .)
    DOTQUOTE        reduce using rule 39 (fact -> DEPTH .)
    EMIT            reduce using rule 39 (fact -> DEPTH .)
    CHAR            reduce using rule 39 (fact -> DEPTH .)
    DUP             reduce using rule 39 (fact -> DEPTH .)
    CR              reduce using rule 39 (fact -> DEPTH .)
    SPACE           reduce using rule 39 (fact -> DEPTH .)
    SPACES          reduce using rule 39 (fact -> DEPTH .)
    SWAP            reduce using rule 39 (fact -> DEPTH .)
    KEY             reduce using rule 39 (fact -> DEPTH .)
    DEPTH           reduce using rule 39 (fact -> DEPTH .)
    DROP            reduce using rule 39 (fact -> DEPTH .)
    $end            reduce using rule 39 (fact -> DEPTH .)
    ELSE            reduce using rule 39 (fact -> DEPTH .)
    LOOP            reduce using rule 39 (fact -> DEPTH .)
    PLUSLOOP        reduce using rule 39 (fact -> DEPTH .)
    ;               reduce using rule 39 (fact -> DEPTH .)
    THEN            reduce using rule 39 (fact -> DEPTH .)


state 27

    (40) fact -> DROP .

    :               reduce using rule 40 (fact -> DROP .)
    IF              reduce using rule 40 (fact -> DROP .)
    DO              reduce using rule 40 (fact -> DROP .)
    VARIABLE        reduce using rule 40 (fact -> DROP .)
    WORD            reduce using rule 40 (fact -> DROP .)
    OPR             reduce using rule 40 (fact -> DROP .)
    INT             reduce using rule 40 (fact -> DROP .)
    COMMENT         reduce using rule 40 (fact -> DROP .)
    .               reduce using rule 40 (fact -> DROP .)
    DOTQUOTE        reduce using rule 40 (fact -> DROP .)
    EMIT            reduce using rule 40 (fact -> DROP .)
    CHAR            reduce using rule 40 (fact -> DROP .)
    DUP             reduce using rule 40 (fact -> DROP .)
    CR              reduce using rule 40 (fact -> DROP .)
    SPACE           reduce using rule 40 (fact -> DROP .)
    SPACES          reduce using rule 40 (fact -> DROP .)
    SWAP            reduce using rule 40 (fact -> DROP .)
    KEY             reduce using rule 40 (fact -> DROP .)
    DEPTH           reduce using rule 40 (fact -> DROP .)
    DROP            reduce using rule 40 (fact -> DROP .)
    $end            reduce using rule 40 (fact -> DROP .)
    ELSE            reduce using rule 40 (fact -> DROP .)
    LOOP            reduce using rule 40 (fact -> DROP .)
    PLUSLOOP        reduce using rule 40 (fact -> DROP .)
    ;               reduce using rule 40 (fact -> DROP .)
    THEN            reduce using rule 40 (fact -> DROP .)


state 28

    (6) exp -> exp term .

    :               reduce using rule 6 (exp -> exp term .)
    IF              reduce using rule 6 (exp -> exp term .)
    DO              reduce using rule 6 (exp -> exp term .)
    VARIABLE        reduce using rule 6 (exp -> exp term .)
    WORD            reduce using rule 6 (exp -> exp term .)
    OPR             reduce using rule 6 (exp -> exp term .)
    INT             reduce using rule 6 (exp -> exp term .)
    COMMENT         reduce using rule 6 (exp -> exp term .)
    .               reduce using rule 6 (exp -> exp term .)
    DOTQUOTE        reduce using rule 6 (exp -> exp term .)
    EMIT            reduce using rule 6 (exp -> exp term .)
    CHAR            reduce using rule 6 (exp -> exp term .)
    DUP             reduce using rule 6 (exp -> exp term .)
    CR              reduce using rule 6 (exp -> exp term .)
    SPACE           reduce using rule 6 (exp -> exp term .)
    SPACES          reduce using rule 6 (exp -> exp term .)
    SWAP            reduce using rule 6 (exp -> exp term .)
    KEY             reduce using rule 6 (exp -> exp term .)
    DEPTH           reduce using rule 6 (exp -> exp term .)
    DROP            reduce using rule 6 (exp -> exp term .)
    $end            reduce using rule 6 (exp -> exp term .)
    ELSE            reduce using rule 6 (exp -> exp term .)
    LOOP            reduce using rule 6 (exp -> exp term .)
    PLUSLOOP        reduce using rule 6 (exp -> exp term .)
    ;               reduce using rule 6 (exp -> exp term .)
    THEN            reduce using rule 6 (exp -> exp term .)


state 29

    (7) exp -> exp function .

    :               reduce using rule 7 (exp -> exp function .)
    IF              reduce using rule 7 (exp -> exp function .)
    DO              reduce using rule 7 (exp -> exp function .)
    VARIABLE        reduce using rule 7 (exp -> exp function .)
    WORD            reduce using rule 7 (exp -> exp function .)
    OPR             reduce using rule 7 (exp -> exp function .)
    INT             reduce using rule 7 (exp -> exp function .)
    COMMENT         reduce using rule 7 (exp -> exp function .)
    .               reduce using rule 7 (exp -> exp function .)
    DOTQUOTE        reduce using rule 7 (exp -> exp function .)
    EMIT            reduce using rule 7 (exp -> exp function .)
    CHAR            reduce using rule 7 (exp -> exp function .)
    DUP             reduce using rule 7 (exp -> exp function .)
    CR              reduce using rule 7 (exp -> exp function .)
    SPACE           reduce using rule 7 (exp -> exp function .)
    SPACES          reduce using rule 7 (exp -> exp function .)
    SWAP            reduce using rule 7 (exp -> exp function .)
    KEY             reduce using rule 7 (exp -> exp function .)
    DEPTH           reduce using rule 7 (exp -> exp function .)
    DROP            reduce using rule 7 (exp -> exp function .)
    $end            reduce using rule 7 (exp -> exp function .)
    ELSE            reduce using rule 7 (exp -> exp function .)
    LOOP            reduce using rule 7 (exp -> exp function .)
    PLUSLOOP        reduce using rule 7 (exp -> exp function .)
    ;               reduce using rule 7 (exp -> exp function .)
    THEN            reduce using rule 7 (exp -> exp function .)


state 30

    (8) exp -> exp conditional .

    :               reduce using rule 8 (exp -> exp conditional .)
    IF              reduce using rule 8 (exp -> exp conditional .)
    DO              reduce using rule 8 (exp -> exp conditional .)
    VARIABLE        reduce using rule 8 (exp -> exp conditional .)
    WORD            reduce using rule 8 (exp -> exp conditional .)
    OPR             reduce using rule 8 (exp -> exp conditional .)
    INT             reduce using rule 8 (exp -> exp conditional .)
    COMMENT         reduce using rule 8 (exp -> exp conditional .)
    .               reduce using rule 8 (exp -> exp conditional .)
    DOTQUOTE        reduce using rule 8 (exp -> exp conditional .)
    EMIT            reduce using rule 8 (exp -> exp conditional .)
    CHAR            reduce using rule 8 (exp -> exp conditional .)
    DUP             reduce using rule 8 (exp -> exp conditional .)
    CR              reduce using rule 8 (exp -> exp conditional .)
    SPACE           reduce using rule 8 (exp -> exp conditional .)
    SPACES          reduce using rule 8 (exp -> exp conditional .)
    SWAP            reduce using rule 8 (exp -> exp conditional .)
    KEY             reduce using rule 8 (exp -> exp conditional .)
    DEPTH           reduce using rule 8 (exp -> exp conditional .)
    DROP            reduce using rule 8 (exp -> exp conditional .)
    $end            reduce using rule 8 (exp -> exp conditional .)
    ELSE            reduce using rule 8 (exp -> exp conditional .)
    LOOP            reduce using rule 8 (exp -> exp conditional .)
    PLUSLOOP        reduce using rule 8 (exp -> exp conditional .)
    ;               reduce using rule 8 (exp -> exp conditional .)
    THEN            reduce using rule 8 (exp -> exp conditional .)


state 31

    (9) exp -> exp loop .

    :               reduce using rule 9 (exp -> exp loop .)
    IF              reduce using rule 9 (exp -> exp loop .)
    DO              reduce using rule 9 (exp -> exp loop .)
    VARIABLE        reduce using rule 9 (exp -> exp loop .)
    WORD            reduce using rule 9 (exp -> exp loop .)
    OPR             reduce using rule 9 (exp -> exp loop .)
    INT             reduce using rule 9 (exp -> exp loop .)
    COMMENT         reduce using rule 9 (exp -> exp loop .)
    .               reduce using rule 9 (exp -> exp loop .)
    DOTQUOTE        reduce using rule 9 (exp -> exp loop .)
    EMIT            reduce using rule 9 (exp -> exp loop .)
    CHAR            reduce using rule 9 (exp -> exp loop .)
    DUP             reduce using rule 9 (exp -> exp loop .)
    CR              reduce using rule 9 (exp -> exp loop .)
    SPACE           reduce using rule 9 (exp -> exp loop .)
    SPACES          reduce using rule 9 (exp -> exp loop .)
    SWAP            reduce using rule 9 (exp -> exp loop .)
    KEY             reduce using rule 9 (exp -> exp loop .)
    DEPTH           reduce using rule 9 (exp -> exp loop .)
    DROP            reduce using rule 9 (exp -> exp loop .)
    $end            reduce using rule 9 (exp -> exp loop .)
    ELSE            reduce using rule 9 (exp -> exp loop .)
    LOOP            reduce using rule 9 (exp -> exp loop .)
    PLUSLOOP        reduce using rule 9 (exp -> exp loop .)
    ;               reduce using rule 9 (exp -> exp loop .)
    THEN            reduce using rule 9 (exp -> exp loop .)


state 32

    (10) exp -> exp variable .

    :               reduce using rule 10 (exp -> exp variable .)
    IF              reduce using rule 10 (exp -> exp variable .)
    DO              reduce using rule 10 (exp -> exp variable .)
    VARIABLE        reduce using rule 10 (exp -> exp variable .)
    WORD            reduce using rule 10 (exp -> exp variable .)
    OPR             reduce using rule 10 (exp -> exp variable .)
    INT             reduce using rule 10 (exp -> exp variable .)
    COMMENT         reduce using rule 10 (exp -> exp variable .)
    .               reduce using rule 10 (exp -> exp variable .)
    DOTQUOTE        reduce using rule 10 (exp -> exp variable .)
    EMIT            reduce using rule 10 (exp -> exp variable .)
    CHAR            reduce using rule 10 (exp -> exp variable .)
    DUP             reduce using rule 10 (exp -> exp variable .)
    CR              reduce using rule 10 (exp -> exp variable .)
    SPACE           reduce using rule 10 (exp -> exp variable .)
    SPACES          reduce using rule 10 (exp -> exp variable .)
    SWAP            reduce using rule 10 (exp -> exp variable .)
    KEY             reduce using rule 10 (exp -> exp variable .)
    DEPTH           reduce using rule 10 (exp -> exp variable .)
    DROP            reduce using rule 10 (exp -> exp variable .)
    $end            reduce using rule 10 (exp -> exp variable .)
    ELSE            reduce using rule 10 (exp -> exp variable .)
    LOOP            reduce using rule 10 (exp -> exp variable .)
    PLUSLOOP        reduce using rule 10 (exp -> exp variable .)
    ;               reduce using rule 10 (exp -> exp variable .)
    THEN            reduce using rule 10 (exp -> exp variable .)


state 33

    (12) function -> : NAME . ;
    (13) function -> : NAME . exp ;
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . variable
    (6) exp -> . exp term
    (7) exp -> . exp function
    (8) exp -> . exp conditional
    (9) exp -> . exp loop
    (10) exp -> . exp variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    ;               shift and go to state 42
    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    exp                            shift and go to state 43
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    variable                       shift and go to state 6
    fact                           shift and go to state 7

state 34

    (14) conditional -> IF ELSE . THEN
    (16) conditional -> IF ELSE . exp THEN
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . variable
    (6) exp -> . exp term
    (7) exp -> . exp function
    (8) exp -> . exp conditional
    (9) exp -> . exp loop
    (10) exp -> . exp variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    THEN            shift and go to state 44
    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    exp                            shift and go to state 45
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    variable                       shift and go to state 6
    fact                           shift and go to state 7

state 35

    (15) conditional -> IF exp . ELSE THEN
    (17) conditional -> IF exp . ELSE exp THEN
    (6) exp -> exp . term
    (7) exp -> exp . function
    (8) exp -> exp . conditional
    (9) exp -> exp . loop
    (10) exp -> exp . variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    ELSE            shift and go to state 46
    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    term                           shift and go to state 28
    function                       shift and go to state 29
    conditional                    shift and go to state 30
    loop                           shift and go to state 31
    variable                       shift and go to state 32
    fact                           shift and go to state 7

state 36

    (18) loop -> DO LOOP .

    :               reduce using rule 18 (loop -> DO LOOP .)
    IF              reduce using rule 18 (loop -> DO LOOP .)
    DO              reduce using rule 18 (loop -> DO LOOP .)
    VARIABLE        reduce using rule 18 (loop -> DO LOOP .)
    WORD            reduce using rule 18 (loop -> DO LOOP .)
    OPR             reduce using rule 18 (loop -> DO LOOP .)
    INT             reduce using rule 18 (loop -> DO LOOP .)
    COMMENT         reduce using rule 18 (loop -> DO LOOP .)
    .               reduce using rule 18 (loop -> DO LOOP .)
    DOTQUOTE        reduce using rule 18 (loop -> DO LOOP .)
    EMIT            reduce using rule 18 (loop -> DO LOOP .)
    CHAR            reduce using rule 18 (loop -> DO LOOP .)
    DUP             reduce using rule 18 (loop -> DO LOOP .)
    CR              reduce using rule 18 (loop -> DO LOOP .)
    SPACE           reduce using rule 18 (loop -> DO LOOP .)
    SPACES          reduce using rule 18 (loop -> DO LOOP .)
    SWAP            reduce using rule 18 (loop -> DO LOOP .)
    KEY             reduce using rule 18 (loop -> DO LOOP .)
    DEPTH           reduce using rule 18 (loop -> DO LOOP .)
    DROP            reduce using rule 18 (loop -> DO LOOP .)
    $end            reduce using rule 18 (loop -> DO LOOP .)
    ELSE            reduce using rule 18 (loop -> DO LOOP .)
    LOOP            reduce using rule 18 (loop -> DO LOOP .)
    PLUSLOOP        reduce using rule 18 (loop -> DO LOOP .)
    ;               reduce using rule 18 (loop -> DO LOOP .)
    THEN            reduce using rule 18 (loop -> DO LOOP .)


state 37

    (19) loop -> DO exp . LOOP
    (21) loop -> DO exp . PLUSLOOP
    (6) exp -> exp . term
    (7) exp -> exp . function
    (8) exp -> exp . conditional
    (9) exp -> exp . loop
    (10) exp -> exp . variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    LOOP            shift and go to state 47
    PLUSLOOP        shift and go to state 48
    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    term                           shift and go to state 28
    function                       shift and go to state 29
    conditional                    shift and go to state 30
    loop                           shift and go to state 31
    variable                       shift and go to state 32
    fact                           shift and go to state 7

state 38

    (20) loop -> DO PLUSLOOP .

    :               reduce using rule 20 (loop -> DO PLUSLOOP .)
    IF              reduce using rule 20 (loop -> DO PLUSLOOP .)
    DO              reduce using rule 20 (loop -> DO PLUSLOOP .)
    VARIABLE        reduce using rule 20 (loop -> DO PLUSLOOP .)
    WORD            reduce using rule 20 (loop -> DO PLUSLOOP .)
    OPR             reduce using rule 20 (loop -> DO PLUSLOOP .)
    INT             reduce using rule 20 (loop -> DO PLUSLOOP .)
    COMMENT         reduce using rule 20 (loop -> DO PLUSLOOP .)
    .               reduce using rule 20 (loop -> DO PLUSLOOP .)
    DOTQUOTE        reduce using rule 20 (loop -> DO PLUSLOOP .)
    EMIT            reduce using rule 20 (loop -> DO PLUSLOOP .)
    CHAR            reduce using rule 20 (loop -> DO PLUSLOOP .)
    DUP             reduce using rule 20 (loop -> DO PLUSLOOP .)
    CR              reduce using rule 20 (loop -> DO PLUSLOOP .)
    SPACE           reduce using rule 20 (loop -> DO PLUSLOOP .)
    SPACES          reduce using rule 20 (loop -> DO PLUSLOOP .)
    SWAP            reduce using rule 20 (loop -> DO PLUSLOOP .)
    KEY             reduce using rule 20 (loop -> DO PLUSLOOP .)
    DEPTH           reduce using rule 20 (loop -> DO PLUSLOOP .)
    DROP            reduce using rule 20 (loop -> DO PLUSLOOP .)
    $end            reduce using rule 20 (loop -> DO PLUSLOOP .)
    ELSE            reduce using rule 20 (loop -> DO PLUSLOOP .)
    LOOP            reduce using rule 20 (loop -> DO PLUSLOOP .)
    PLUSLOOP        reduce using rule 20 (loop -> DO PLUSLOOP .)
    ;               reduce using rule 20 (loop -> DO PLUSLOOP .)
    THEN            reduce using rule 20 (loop -> DO PLUSLOOP .)


state 39

    (22) variable -> VARIABLE WORD .

    :               reduce using rule 22 (variable -> VARIABLE WORD .)
    IF              reduce using rule 22 (variable -> VARIABLE WORD .)
    DO              reduce using rule 22 (variable -> VARIABLE WORD .)
    VARIABLE        reduce using rule 22 (variable -> VARIABLE WORD .)
    WORD            reduce using rule 22 (variable -> VARIABLE WORD .)
    OPR             reduce using rule 22 (variable -> VARIABLE WORD .)
    INT             reduce using rule 22 (variable -> VARIABLE WORD .)
    COMMENT         reduce using rule 22 (variable -> VARIABLE WORD .)
    .               reduce using rule 22 (variable -> VARIABLE WORD .)
    DOTQUOTE        reduce using rule 22 (variable -> VARIABLE WORD .)
    EMIT            reduce using rule 22 (variable -> VARIABLE WORD .)
    CHAR            reduce using rule 22 (variable -> VARIABLE WORD .)
    DUP             reduce using rule 22 (variable -> VARIABLE WORD .)
    CR              reduce using rule 22 (variable -> VARIABLE WORD .)
    SPACE           reduce using rule 22 (variable -> VARIABLE WORD .)
    SPACES          reduce using rule 22 (variable -> VARIABLE WORD .)
    SWAP            reduce using rule 22 (variable -> VARIABLE WORD .)
    KEY             reduce using rule 22 (variable -> VARIABLE WORD .)
    DEPTH           reduce using rule 22 (variable -> VARIABLE WORD .)
    DROP            reduce using rule 22 (variable -> VARIABLE WORD .)
    $end            reduce using rule 22 (variable -> VARIABLE WORD .)
    ELSE            reduce using rule 22 (variable -> VARIABLE WORD .)
    LOOP            reduce using rule 22 (variable -> VARIABLE WORD .)
    PLUSLOOP        reduce using rule 22 (variable -> VARIABLE WORD .)
    ;               reduce using rule 22 (variable -> VARIABLE WORD .)
    THEN            reduce using rule 22 (variable -> VARIABLE WORD .)


state 40

    (23) variable -> WORD ! .

    :               reduce using rule 23 (variable -> WORD ! .)
    IF              reduce using rule 23 (variable -> WORD ! .)
    DO              reduce using rule 23 (variable -> WORD ! .)
    VARIABLE        reduce using rule 23 (variable -> WORD ! .)
    WORD            reduce using rule 23 (variable -> WORD ! .)
    OPR             reduce using rule 23 (variable -> WORD ! .)
    INT             reduce using rule 23 (variable -> WORD ! .)
    COMMENT         reduce using rule 23 (variable -> WORD ! .)
    .               reduce using rule 23 (variable -> WORD ! .)
    DOTQUOTE        reduce using rule 23 (variable -> WORD ! .)
    EMIT            reduce using rule 23 (variable -> WORD ! .)
    CHAR            reduce using rule 23 (variable -> WORD ! .)
    DUP             reduce using rule 23 (variable -> WORD ! .)
    CR              reduce using rule 23 (variable -> WORD ! .)
    SPACE           reduce using rule 23 (variable -> WORD ! .)
    SPACES          reduce using rule 23 (variable -> WORD ! .)
    SWAP            reduce using rule 23 (variable -> WORD ! .)
    KEY             reduce using rule 23 (variable -> WORD ! .)
    DEPTH           reduce using rule 23 (variable -> WORD ! .)
    DROP            reduce using rule 23 (variable -> WORD ! .)
    $end            reduce using rule 23 (variable -> WORD ! .)
    ELSE            reduce using rule 23 (variable -> WORD ! .)
    LOOP            reduce using rule 23 (variable -> WORD ! .)
    PLUSLOOP        reduce using rule 23 (variable -> WORD ! .)
    ;               reduce using rule 23 (variable -> WORD ! .)
    THEN            reduce using rule 23 (variable -> WORD ! .)


state 41

    (24) variable -> WORD @ .

    :               reduce using rule 24 (variable -> WORD @ .)
    IF              reduce using rule 24 (variable -> WORD @ .)
    DO              reduce using rule 24 (variable -> WORD @ .)
    VARIABLE        reduce using rule 24 (variable -> WORD @ .)
    WORD            reduce using rule 24 (variable -> WORD @ .)
    OPR             reduce using rule 24 (variable -> WORD @ .)
    INT             reduce using rule 24 (variable -> WORD @ .)
    COMMENT         reduce using rule 24 (variable -> WORD @ .)
    .               reduce using rule 24 (variable -> WORD @ .)
    DOTQUOTE        reduce using rule 24 (variable -> WORD @ .)
    EMIT            reduce using rule 24 (variable -> WORD @ .)
    CHAR            reduce using rule 24 (variable -> WORD @ .)
    DUP             reduce using rule 24 (variable -> WORD @ .)
    CR              reduce using rule 24 (variable -> WORD @ .)
    SPACE           reduce using rule 24 (variable -> WORD @ .)
    SPACES          reduce using rule 24 (variable -> WORD @ .)
    SWAP            reduce using rule 24 (variable -> WORD @ .)
    KEY             reduce using rule 24 (variable -> WORD @ .)
    DEPTH           reduce using rule 24 (variable -> WORD @ .)
    DROP            reduce using rule 24 (variable -> WORD @ .)
    $end            reduce using rule 24 (variable -> WORD @ .)
    ELSE            reduce using rule 24 (variable -> WORD @ .)
    LOOP            reduce using rule 24 (variable -> WORD @ .)
    PLUSLOOP        reduce using rule 24 (variable -> WORD @ .)
    ;               reduce using rule 24 (variable -> WORD @ .)
    THEN            reduce using rule 24 (variable -> WORD @ .)


state 42

    (12) function -> : NAME ; .

    :               reduce using rule 12 (function -> : NAME ; .)
    IF              reduce using rule 12 (function -> : NAME ; .)
    DO              reduce using rule 12 (function -> : NAME ; .)
    VARIABLE        reduce using rule 12 (function -> : NAME ; .)
    WORD            reduce using rule 12 (function -> : NAME ; .)
    OPR             reduce using rule 12 (function -> : NAME ; .)
    INT             reduce using rule 12 (function -> : NAME ; .)
    COMMENT         reduce using rule 12 (function -> : NAME ; .)
    .               reduce using rule 12 (function -> : NAME ; .)
    DOTQUOTE        reduce using rule 12 (function -> : NAME ; .)
    EMIT            reduce using rule 12 (function -> : NAME ; .)
    CHAR            reduce using rule 12 (function -> : NAME ; .)
    DUP             reduce using rule 12 (function -> : NAME ; .)
    CR              reduce using rule 12 (function -> : NAME ; .)
    SPACE           reduce using rule 12 (function -> : NAME ; .)
    SPACES          reduce using rule 12 (function -> : NAME ; .)
    SWAP            reduce using rule 12 (function -> : NAME ; .)
    KEY             reduce using rule 12 (function -> : NAME ; .)
    DEPTH           reduce using rule 12 (function -> : NAME ; .)
    DROP            reduce using rule 12 (function -> : NAME ; .)
    $end            reduce using rule 12 (function -> : NAME ; .)
    ELSE            reduce using rule 12 (function -> : NAME ; .)
    LOOP            reduce using rule 12 (function -> : NAME ; .)
    PLUSLOOP        reduce using rule 12 (function -> : NAME ; .)
    ;               reduce using rule 12 (function -> : NAME ; .)
    THEN            reduce using rule 12 (function -> : NAME ; .)


state 43

    (13) function -> : NAME exp . ;
    (6) exp -> exp . term
    (7) exp -> exp . function
    (8) exp -> exp . conditional
    (9) exp -> exp . loop
    (10) exp -> exp . variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    ;               shift and go to state 49
    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    term                           shift and go to state 28
    function                       shift and go to state 29
    conditional                    shift and go to state 30
    loop                           shift and go to state 31
    variable                       shift and go to state 32
    fact                           shift and go to state 7

state 44

    (14) conditional -> IF ELSE THEN .

    :               reduce using rule 14 (conditional -> IF ELSE THEN .)
    IF              reduce using rule 14 (conditional -> IF ELSE THEN .)
    DO              reduce using rule 14 (conditional -> IF ELSE THEN .)
    VARIABLE        reduce using rule 14 (conditional -> IF ELSE THEN .)
    WORD            reduce using rule 14 (conditional -> IF ELSE THEN .)
    OPR             reduce using rule 14 (conditional -> IF ELSE THEN .)
    INT             reduce using rule 14 (conditional -> IF ELSE THEN .)
    COMMENT         reduce using rule 14 (conditional -> IF ELSE THEN .)
    .               reduce using rule 14 (conditional -> IF ELSE THEN .)
    DOTQUOTE        reduce using rule 14 (conditional -> IF ELSE THEN .)
    EMIT            reduce using rule 14 (conditional -> IF ELSE THEN .)
    CHAR            reduce using rule 14 (conditional -> IF ELSE THEN .)
    DUP             reduce using rule 14 (conditional -> IF ELSE THEN .)
    CR              reduce using rule 14 (conditional -> IF ELSE THEN .)
    SPACE           reduce using rule 14 (conditional -> IF ELSE THEN .)
    SPACES          reduce using rule 14 (conditional -> IF ELSE THEN .)
    SWAP            reduce using rule 14 (conditional -> IF ELSE THEN .)
    KEY             reduce using rule 14 (conditional -> IF ELSE THEN .)
    DEPTH           reduce using rule 14 (conditional -> IF ELSE THEN .)
    DROP            reduce using rule 14 (conditional -> IF ELSE THEN .)
    $end            reduce using rule 14 (conditional -> IF ELSE THEN .)
    ELSE            reduce using rule 14 (conditional -> IF ELSE THEN .)
    LOOP            reduce using rule 14 (conditional -> IF ELSE THEN .)
    PLUSLOOP        reduce using rule 14 (conditional -> IF ELSE THEN .)
    ;               reduce using rule 14 (conditional -> IF ELSE THEN .)
    THEN            reduce using rule 14 (conditional -> IF ELSE THEN .)


state 45

    (16) conditional -> IF ELSE exp . THEN
    (6) exp -> exp . term
    (7) exp -> exp . function
    (8) exp -> exp . conditional
    (9) exp -> exp . loop
    (10) exp -> exp . variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    THEN            shift and go to state 50
    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    term                           shift and go to state 28
    function                       shift and go to state 29
    conditional                    shift and go to state 30
    loop                           shift and go to state 31
    variable                       shift and go to state 32
    fact                           shift and go to state 7

state 46

    (15) conditional -> IF exp ELSE . THEN
    (17) conditional -> IF exp ELSE . exp THEN
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . variable
    (6) exp -> . exp term
    (7) exp -> . exp function
    (8) exp -> . exp conditional
    (9) exp -> . exp loop
    (10) exp -> . exp variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    THEN            shift and go to state 52
    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    exp                            shift and go to state 51
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    variable                       shift and go to state 6
    fact                           shift and go to state 7

state 47

    (19) loop -> DO exp LOOP .

    :               reduce using rule 19 (loop -> DO exp LOOP .)
    IF              reduce using rule 19 (loop -> DO exp LOOP .)
    DO              reduce using rule 19 (loop -> DO exp LOOP .)
    VARIABLE        reduce using rule 19 (loop -> DO exp LOOP .)
    WORD            reduce using rule 19 (loop -> DO exp LOOP .)
    OPR             reduce using rule 19 (loop -> DO exp LOOP .)
    INT             reduce using rule 19 (loop -> DO exp LOOP .)
    COMMENT         reduce using rule 19 (loop -> DO exp LOOP .)
    .               reduce using rule 19 (loop -> DO exp LOOP .)
    DOTQUOTE        reduce using rule 19 (loop -> DO exp LOOP .)
    EMIT            reduce using rule 19 (loop -> DO exp LOOP .)
    CHAR            reduce using rule 19 (loop -> DO exp LOOP .)
    DUP             reduce using rule 19 (loop -> DO exp LOOP .)
    CR              reduce using rule 19 (loop -> DO exp LOOP .)
    SPACE           reduce using rule 19 (loop -> DO exp LOOP .)
    SPACES          reduce using rule 19 (loop -> DO exp LOOP .)
    SWAP            reduce using rule 19 (loop -> DO exp LOOP .)
    KEY             reduce using rule 19 (loop -> DO exp LOOP .)
    DEPTH           reduce using rule 19 (loop -> DO exp LOOP .)
    DROP            reduce using rule 19 (loop -> DO exp LOOP .)
    $end            reduce using rule 19 (loop -> DO exp LOOP .)
    ELSE            reduce using rule 19 (loop -> DO exp LOOP .)
    LOOP            reduce using rule 19 (loop -> DO exp LOOP .)
    PLUSLOOP        reduce using rule 19 (loop -> DO exp LOOP .)
    ;               reduce using rule 19 (loop -> DO exp LOOP .)
    THEN            reduce using rule 19 (loop -> DO exp LOOP .)


state 48

    (21) loop -> DO exp PLUSLOOP .

    :               reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    IF              reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    DO              reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    VARIABLE        reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    WORD            reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    OPR             reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    INT             reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    COMMENT         reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    .               reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    DOTQUOTE        reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    EMIT            reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    CHAR            reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    DUP             reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    CR              reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    SPACE           reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    SPACES          reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    SWAP            reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    KEY             reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    DEPTH           reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    DROP            reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    $end            reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    ELSE            reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    LOOP            reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    PLUSLOOP        reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    ;               reduce using rule 21 (loop -> DO exp PLUSLOOP .)
    THEN            reduce using rule 21 (loop -> DO exp PLUSLOOP .)


state 49

    (13) function -> : NAME exp ; .

    :               reduce using rule 13 (function -> : NAME exp ; .)
    IF              reduce using rule 13 (function -> : NAME exp ; .)
    DO              reduce using rule 13 (function -> : NAME exp ; .)
    VARIABLE        reduce using rule 13 (function -> : NAME exp ; .)
    WORD            reduce using rule 13 (function -> : NAME exp ; .)
    OPR             reduce using rule 13 (function -> : NAME exp ; .)
    INT             reduce using rule 13 (function -> : NAME exp ; .)
    COMMENT         reduce using rule 13 (function -> : NAME exp ; .)
    .               reduce using rule 13 (function -> : NAME exp ; .)
    DOTQUOTE        reduce using rule 13 (function -> : NAME exp ; .)
    EMIT            reduce using rule 13 (function -> : NAME exp ; .)
    CHAR            reduce using rule 13 (function -> : NAME exp ; .)
    DUP             reduce using rule 13 (function -> : NAME exp ; .)
    CR              reduce using rule 13 (function -> : NAME exp ; .)
    SPACE           reduce using rule 13 (function -> : NAME exp ; .)
    SPACES          reduce using rule 13 (function -> : NAME exp ; .)
    SWAP            reduce using rule 13 (function -> : NAME exp ; .)
    KEY             reduce using rule 13 (function -> : NAME exp ; .)
    DEPTH           reduce using rule 13 (function -> : NAME exp ; .)
    DROP            reduce using rule 13 (function -> : NAME exp ; .)
    $end            reduce using rule 13 (function -> : NAME exp ; .)
    ELSE            reduce using rule 13 (function -> : NAME exp ; .)
    LOOP            reduce using rule 13 (function -> : NAME exp ; .)
    PLUSLOOP        reduce using rule 13 (function -> : NAME exp ; .)
    ;               reduce using rule 13 (function -> : NAME exp ; .)
    THEN            reduce using rule 13 (function -> : NAME exp ; .)


state 50

    (16) conditional -> IF ELSE exp THEN .

    :               reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    IF              reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    DO              reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    VARIABLE        reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    WORD            reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    OPR             reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    INT             reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    COMMENT         reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    .               reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    DOTQUOTE        reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    EMIT            reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    CHAR            reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    DUP             reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    CR              reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    SPACE           reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    SPACES          reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    SWAP            reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    KEY             reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    DEPTH           reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    DROP            reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    $end            reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    ELSE            reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    LOOP            reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    PLUSLOOP        reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    ;               reduce using rule 16 (conditional -> IF ELSE exp THEN .)
    THEN            reduce using rule 16 (conditional -> IF ELSE exp THEN .)


state 51

    (17) conditional -> IF exp ELSE exp . THEN
    (6) exp -> exp . term
    (7) exp -> exp . function
    (8) exp -> exp . conditional
    (9) exp -> exp . loop
    (10) exp -> exp . variable
    (11) term -> . fact
    (12) function -> . : NAME ;
    (13) function -> . : NAME exp ;
    (14) conditional -> . IF ELSE THEN
    (15) conditional -> . IF exp ELSE THEN
    (16) conditional -> . IF ELSE exp THEN
    (17) conditional -> . IF exp ELSE exp THEN
    (18) loop -> . DO LOOP
    (19) loop -> . DO exp LOOP
    (20) loop -> . DO PLUSLOOP
    (21) loop -> . DO exp PLUSLOOP
    (22) variable -> . VARIABLE WORD
    (23) variable -> . WORD !
    (24) variable -> . WORD @
    (25) fact -> . OPR
    (26) fact -> . INT
    (27) fact -> . WORD
    (28) fact -> . COMMENT
    (29) fact -> . .
    (30) fact -> . DOTQUOTE
    (31) fact -> . EMIT
    (32) fact -> . CHAR
    (33) fact -> . DUP
    (34) fact -> . CR
    (35) fact -> . SPACE
    (36) fact -> . SPACES
    (37) fact -> . SWAP
    (38) fact -> . KEY
    (39) fact -> . DEPTH
    (40) fact -> . DROP

    THEN            shift and go to state 53
    :               shift and go to state 8
    IF              shift and go to state 9
    DO              shift and go to state 10
    VARIABLE        shift and go to state 11
    WORD            shift and go to state 12
    OPR             shift and go to state 13
    INT             shift and go to state 14
    COMMENT         shift and go to state 15
    .               shift and go to state 16
    DOTQUOTE        shift and go to state 17
    EMIT            shift and go to state 18
    CHAR            shift and go to state 19
    DUP             shift and go to state 20
    CR              shift and go to state 21
    SPACE           shift and go to state 22
    SPACES          shift and go to state 23
    SWAP            shift and go to state 24
    KEY             shift and go to state 25
    DEPTH           shift and go to state 26
    DROP            shift and go to state 27

    term                           shift and go to state 28
    function                       shift and go to state 29
    conditional                    shift and go to state 30
    loop                           shift and go to state 31
    variable                       shift and go to state 32
    fact                           shift and go to state 7

state 52

    (15) conditional -> IF exp ELSE THEN .

    :               reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    IF              reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    DO              reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    VARIABLE        reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    WORD            reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    OPR             reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    INT             reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    COMMENT         reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    .               reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    DOTQUOTE        reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    EMIT            reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    CHAR            reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    DUP             reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    CR              reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    SPACE           reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    SPACES          reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    SWAP            reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    KEY             reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    DEPTH           reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    DROP            reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    $end            reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    ELSE            reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    LOOP            reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    PLUSLOOP        reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    ;               reduce using rule 15 (conditional -> IF exp ELSE THEN .)
    THEN            reduce using rule 15 (conditional -> IF exp ELSE THEN .)


state 53

    (17) conditional -> IF exp ELSE exp THEN .

    :               reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    IF              reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    DO              reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    VARIABLE        reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    WORD            reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    OPR             reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    INT             reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    COMMENT         reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    .               reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    DOTQUOTE        reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    EMIT            reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    CHAR            reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    DUP             reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    CR              reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    SPACE           reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    SPACES          reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    SWAP            reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    KEY             reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    DEPTH           reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    DROP            reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    $end            reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    ELSE            reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    LOOP            reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    PLUSLOOP        reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    ;               reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)
    THEN            reduce using rule 17 (conditional -> IF exp ELSE exp THEN .)

