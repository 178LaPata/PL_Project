Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> exp
Rule 1     exp -> term
Rule 2     exp -> function
Rule 3     exp -> conditional
Rule 4     exp -> loop
Rule 5     exp -> exp term
Rule 6     exp -> exp function
Rule 7     exp -> exp conditional
Rule 8     term -> fact
Rule 9     function -> : NAME ;
Rule 10    function -> : NAME exp ;
Rule 11    conditional -> IF ELSE THEN
Rule 12    conditional -> IF exp ELSE THEN
Rule 13    conditional -> IF ELSE exp THEN
Rule 14    conditional -> IF exp ELSE exp THEN
Rule 15    loop -> DO LOOP
Rule 16    loop -> DO exp LOOP
Rule 17    loop -> DO PLUSLOOP
Rule 18    loop -> DO exp PLUSLOOP
Rule 19    fact -> OPR
Rule 20    fact -> INT
Rule 21    fact -> WORD
Rule 22    fact -> COMMENT
Rule 23    fact -> .
Rule 24    fact -> DOTQUOTE
Rule 25    fact -> EMIT
Rule 26    fact -> CHAR
Rule 27    fact -> DUP
Rule 28    fact -> CR
Rule 29    fact -> SPACE
Rule 30    fact -> SPACES
Rule 31    fact -> SWAP
Rule 32    fact -> KEY
Rule 33    fact -> DEPTH
Rule 34    fact -> DROP

Terminals, with rules where they appear

.                    : 23
:                    : 9 10
;                    : 9 10
CHAR                 : 26
COMMENT              : 22
CR                   : 28
DEPTH                : 33
DO                   : 15 16 17 18
DOTQUOTE             : 24
DROP                 : 34
DUP                  : 27
ELSE                 : 11 12 13 14
EMIT                 : 25
IF                   : 11 12 13 14
INT                  : 20
KEY                  : 32
LOOP                 : 15 16
NAME                 : 9 10
OPR                  : 19
PLUSLOOP             : 17 18
SPACE                : 29
SPACES               : 30
SWAP                 : 31
THEN                 : 11 12 13 14
WORD                 : 21
error                : 

Nonterminals, with rules where they appear

conditional          : 3 7
exp                  : 5 6 7 10 12 13 14 14 16 18 0
fact                 : 8
function             : 2 6
loop                 : 4
term                 : 1 5

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . exp term
    (6) exp -> . exp function
    (7) exp -> . exp conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (15) loop -> . DO LOOP
    (16) loop -> . DO exp LOOP
    (17) loop -> . DO PLUSLOOP
    (18) loop -> . DO exp PLUSLOOP
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    :               shift and go to state 7
    IF              shift and go to state 8
    DO              shift and go to state 9
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    exp                            shift and go to state 1
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    fact                           shift and go to state 6

state 1

    (0) S' -> exp .
    (5) exp -> exp . term
    (6) exp -> exp . function
    (7) exp -> exp . conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    :               shift and go to state 7
    IF              shift and go to state 8
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    term                           shift and go to state 26
    function                       shift and go to state 27
    conditional                    shift and go to state 28
    fact                           shift and go to state 6

state 2

    (1) exp -> term .

    :               reduce using rule 1 (exp -> term .)
    IF              reduce using rule 1 (exp -> term .)
    OPR             reduce using rule 1 (exp -> term .)
    INT             reduce using rule 1 (exp -> term .)
    WORD            reduce using rule 1 (exp -> term .)
    COMMENT         reduce using rule 1 (exp -> term .)
    .               reduce using rule 1 (exp -> term .)
    DOTQUOTE        reduce using rule 1 (exp -> term .)
    EMIT            reduce using rule 1 (exp -> term .)
    CHAR            reduce using rule 1 (exp -> term .)
    DUP             reduce using rule 1 (exp -> term .)
    CR              reduce using rule 1 (exp -> term .)
    SPACE           reduce using rule 1 (exp -> term .)
    SPACES          reduce using rule 1 (exp -> term .)
    SWAP            reduce using rule 1 (exp -> term .)
    KEY             reduce using rule 1 (exp -> term .)
    DEPTH           reduce using rule 1 (exp -> term .)
    DROP            reduce using rule 1 (exp -> term .)
    $end            reduce using rule 1 (exp -> term .)
    ELSE            reduce using rule 1 (exp -> term .)
    LOOP            reduce using rule 1 (exp -> term .)
    PLUSLOOP        reduce using rule 1 (exp -> term .)
    ;               reduce using rule 1 (exp -> term .)
    THEN            reduce using rule 1 (exp -> term .)


state 3

    (2) exp -> function .

    :               reduce using rule 2 (exp -> function .)
    IF              reduce using rule 2 (exp -> function .)
    OPR             reduce using rule 2 (exp -> function .)
    INT             reduce using rule 2 (exp -> function .)
    WORD            reduce using rule 2 (exp -> function .)
    COMMENT         reduce using rule 2 (exp -> function .)
    .               reduce using rule 2 (exp -> function .)
    DOTQUOTE        reduce using rule 2 (exp -> function .)
    EMIT            reduce using rule 2 (exp -> function .)
    CHAR            reduce using rule 2 (exp -> function .)
    DUP             reduce using rule 2 (exp -> function .)
    CR              reduce using rule 2 (exp -> function .)
    SPACE           reduce using rule 2 (exp -> function .)
    SPACES          reduce using rule 2 (exp -> function .)
    SWAP            reduce using rule 2 (exp -> function .)
    KEY             reduce using rule 2 (exp -> function .)
    DEPTH           reduce using rule 2 (exp -> function .)
    DROP            reduce using rule 2 (exp -> function .)
    $end            reduce using rule 2 (exp -> function .)
    ELSE            reduce using rule 2 (exp -> function .)
    LOOP            reduce using rule 2 (exp -> function .)
    PLUSLOOP        reduce using rule 2 (exp -> function .)
    ;               reduce using rule 2 (exp -> function .)
    THEN            reduce using rule 2 (exp -> function .)


state 4

    (3) exp -> conditional .

    :               reduce using rule 3 (exp -> conditional .)
    IF              reduce using rule 3 (exp -> conditional .)
    OPR             reduce using rule 3 (exp -> conditional .)
    INT             reduce using rule 3 (exp -> conditional .)
    WORD            reduce using rule 3 (exp -> conditional .)
    COMMENT         reduce using rule 3 (exp -> conditional .)
    .               reduce using rule 3 (exp -> conditional .)
    DOTQUOTE        reduce using rule 3 (exp -> conditional .)
    EMIT            reduce using rule 3 (exp -> conditional .)
    CHAR            reduce using rule 3 (exp -> conditional .)
    DUP             reduce using rule 3 (exp -> conditional .)
    CR              reduce using rule 3 (exp -> conditional .)
    SPACE           reduce using rule 3 (exp -> conditional .)
    SPACES          reduce using rule 3 (exp -> conditional .)
    SWAP            reduce using rule 3 (exp -> conditional .)
    KEY             reduce using rule 3 (exp -> conditional .)
    DEPTH           reduce using rule 3 (exp -> conditional .)
    DROP            reduce using rule 3 (exp -> conditional .)
    $end            reduce using rule 3 (exp -> conditional .)
    ELSE            reduce using rule 3 (exp -> conditional .)
    LOOP            reduce using rule 3 (exp -> conditional .)
    PLUSLOOP        reduce using rule 3 (exp -> conditional .)
    ;               reduce using rule 3 (exp -> conditional .)
    THEN            reduce using rule 3 (exp -> conditional .)


state 5

    (4) exp -> loop .

    :               reduce using rule 4 (exp -> loop .)
    IF              reduce using rule 4 (exp -> loop .)
    OPR             reduce using rule 4 (exp -> loop .)
    INT             reduce using rule 4 (exp -> loop .)
    WORD            reduce using rule 4 (exp -> loop .)
    COMMENT         reduce using rule 4 (exp -> loop .)
    .               reduce using rule 4 (exp -> loop .)
    DOTQUOTE        reduce using rule 4 (exp -> loop .)
    EMIT            reduce using rule 4 (exp -> loop .)
    CHAR            reduce using rule 4 (exp -> loop .)
    DUP             reduce using rule 4 (exp -> loop .)
    CR              reduce using rule 4 (exp -> loop .)
    SPACE           reduce using rule 4 (exp -> loop .)
    SPACES          reduce using rule 4 (exp -> loop .)
    SWAP            reduce using rule 4 (exp -> loop .)
    KEY             reduce using rule 4 (exp -> loop .)
    DEPTH           reduce using rule 4 (exp -> loop .)
    DROP            reduce using rule 4 (exp -> loop .)
    $end            reduce using rule 4 (exp -> loop .)
    ELSE            reduce using rule 4 (exp -> loop .)
    LOOP            reduce using rule 4 (exp -> loop .)
    PLUSLOOP        reduce using rule 4 (exp -> loop .)
    ;               reduce using rule 4 (exp -> loop .)
    THEN            reduce using rule 4 (exp -> loop .)


state 6

    (8) term -> fact .

    :               reduce using rule 8 (term -> fact .)
    IF              reduce using rule 8 (term -> fact .)
    OPR             reduce using rule 8 (term -> fact .)
    INT             reduce using rule 8 (term -> fact .)
    WORD            reduce using rule 8 (term -> fact .)
    COMMENT         reduce using rule 8 (term -> fact .)
    .               reduce using rule 8 (term -> fact .)
    DOTQUOTE        reduce using rule 8 (term -> fact .)
    EMIT            reduce using rule 8 (term -> fact .)
    CHAR            reduce using rule 8 (term -> fact .)
    DUP             reduce using rule 8 (term -> fact .)
    CR              reduce using rule 8 (term -> fact .)
    SPACE           reduce using rule 8 (term -> fact .)
    SPACES          reduce using rule 8 (term -> fact .)
    SWAP            reduce using rule 8 (term -> fact .)
    KEY             reduce using rule 8 (term -> fact .)
    DEPTH           reduce using rule 8 (term -> fact .)
    DROP            reduce using rule 8 (term -> fact .)
    $end            reduce using rule 8 (term -> fact .)
    ELSE            reduce using rule 8 (term -> fact .)
    LOOP            reduce using rule 8 (term -> fact .)
    PLUSLOOP        reduce using rule 8 (term -> fact .)
    ;               reduce using rule 8 (term -> fact .)
    THEN            reduce using rule 8 (term -> fact .)


state 7

    (9) function -> : . NAME ;
    (10) function -> : . NAME exp ;

    NAME            shift and go to state 29


state 8

    (11) conditional -> IF . ELSE THEN
    (12) conditional -> IF . exp ELSE THEN
    (13) conditional -> IF . ELSE exp THEN
    (14) conditional -> IF . exp ELSE exp THEN
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . exp term
    (6) exp -> . exp function
    (7) exp -> . exp conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (15) loop -> . DO LOOP
    (16) loop -> . DO exp LOOP
    (17) loop -> . DO PLUSLOOP
    (18) loop -> . DO exp PLUSLOOP
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    ELSE            shift and go to state 30
    :               shift and go to state 7
    IF              shift and go to state 8
    DO              shift and go to state 9
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    exp                            shift and go to state 31
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    fact                           shift and go to state 6

state 9

    (15) loop -> DO . LOOP
    (16) loop -> DO . exp LOOP
    (17) loop -> DO . PLUSLOOP
    (18) loop -> DO . exp PLUSLOOP
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . exp term
    (6) exp -> . exp function
    (7) exp -> . exp conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (15) loop -> . DO LOOP
    (16) loop -> . DO exp LOOP
    (17) loop -> . DO PLUSLOOP
    (18) loop -> . DO exp PLUSLOOP
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    LOOP            shift and go to state 32
    PLUSLOOP        shift and go to state 34
    :               shift and go to state 7
    IF              shift and go to state 8
    DO              shift and go to state 9
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    exp                            shift and go to state 33
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    fact                           shift and go to state 6

state 10

    (19) fact -> OPR .

    :               reduce using rule 19 (fact -> OPR .)
    IF              reduce using rule 19 (fact -> OPR .)
    OPR             reduce using rule 19 (fact -> OPR .)
    INT             reduce using rule 19 (fact -> OPR .)
    WORD            reduce using rule 19 (fact -> OPR .)
    COMMENT         reduce using rule 19 (fact -> OPR .)
    .               reduce using rule 19 (fact -> OPR .)
    DOTQUOTE        reduce using rule 19 (fact -> OPR .)
    EMIT            reduce using rule 19 (fact -> OPR .)
    CHAR            reduce using rule 19 (fact -> OPR .)
    DUP             reduce using rule 19 (fact -> OPR .)
    CR              reduce using rule 19 (fact -> OPR .)
    SPACE           reduce using rule 19 (fact -> OPR .)
    SPACES          reduce using rule 19 (fact -> OPR .)
    SWAP            reduce using rule 19 (fact -> OPR .)
    KEY             reduce using rule 19 (fact -> OPR .)
    DEPTH           reduce using rule 19 (fact -> OPR .)
    DROP            reduce using rule 19 (fact -> OPR .)
    $end            reduce using rule 19 (fact -> OPR .)
    ELSE            reduce using rule 19 (fact -> OPR .)
    LOOP            reduce using rule 19 (fact -> OPR .)
    PLUSLOOP        reduce using rule 19 (fact -> OPR .)
    ;               reduce using rule 19 (fact -> OPR .)
    THEN            reduce using rule 19 (fact -> OPR .)


state 11

    (20) fact -> INT .

    :               reduce using rule 20 (fact -> INT .)
    IF              reduce using rule 20 (fact -> INT .)
    OPR             reduce using rule 20 (fact -> INT .)
    INT             reduce using rule 20 (fact -> INT .)
    WORD            reduce using rule 20 (fact -> INT .)
    COMMENT         reduce using rule 20 (fact -> INT .)
    .               reduce using rule 20 (fact -> INT .)
    DOTQUOTE        reduce using rule 20 (fact -> INT .)
    EMIT            reduce using rule 20 (fact -> INT .)
    CHAR            reduce using rule 20 (fact -> INT .)
    DUP             reduce using rule 20 (fact -> INT .)
    CR              reduce using rule 20 (fact -> INT .)
    SPACE           reduce using rule 20 (fact -> INT .)
    SPACES          reduce using rule 20 (fact -> INT .)
    SWAP            reduce using rule 20 (fact -> INT .)
    KEY             reduce using rule 20 (fact -> INT .)
    DEPTH           reduce using rule 20 (fact -> INT .)
    DROP            reduce using rule 20 (fact -> INT .)
    $end            reduce using rule 20 (fact -> INT .)
    ELSE            reduce using rule 20 (fact -> INT .)
    LOOP            reduce using rule 20 (fact -> INT .)
    PLUSLOOP        reduce using rule 20 (fact -> INT .)
    ;               reduce using rule 20 (fact -> INT .)
    THEN            reduce using rule 20 (fact -> INT .)


state 12

    (21) fact -> WORD .

    :               reduce using rule 21 (fact -> WORD .)
    IF              reduce using rule 21 (fact -> WORD .)
    OPR             reduce using rule 21 (fact -> WORD .)
    INT             reduce using rule 21 (fact -> WORD .)
    WORD            reduce using rule 21 (fact -> WORD .)
    COMMENT         reduce using rule 21 (fact -> WORD .)
    .               reduce using rule 21 (fact -> WORD .)
    DOTQUOTE        reduce using rule 21 (fact -> WORD .)
    EMIT            reduce using rule 21 (fact -> WORD .)
    CHAR            reduce using rule 21 (fact -> WORD .)
    DUP             reduce using rule 21 (fact -> WORD .)
    CR              reduce using rule 21 (fact -> WORD .)
    SPACE           reduce using rule 21 (fact -> WORD .)
    SPACES          reduce using rule 21 (fact -> WORD .)
    SWAP            reduce using rule 21 (fact -> WORD .)
    KEY             reduce using rule 21 (fact -> WORD .)
    DEPTH           reduce using rule 21 (fact -> WORD .)
    DROP            reduce using rule 21 (fact -> WORD .)
    $end            reduce using rule 21 (fact -> WORD .)
    ELSE            reduce using rule 21 (fact -> WORD .)
    LOOP            reduce using rule 21 (fact -> WORD .)
    PLUSLOOP        reduce using rule 21 (fact -> WORD .)
    ;               reduce using rule 21 (fact -> WORD .)
    THEN            reduce using rule 21 (fact -> WORD .)


state 13

    (22) fact -> COMMENT .

    :               reduce using rule 22 (fact -> COMMENT .)
    IF              reduce using rule 22 (fact -> COMMENT .)
    OPR             reduce using rule 22 (fact -> COMMENT .)
    INT             reduce using rule 22 (fact -> COMMENT .)
    WORD            reduce using rule 22 (fact -> COMMENT .)
    COMMENT         reduce using rule 22 (fact -> COMMENT .)
    .               reduce using rule 22 (fact -> COMMENT .)
    DOTQUOTE        reduce using rule 22 (fact -> COMMENT .)
    EMIT            reduce using rule 22 (fact -> COMMENT .)
    CHAR            reduce using rule 22 (fact -> COMMENT .)
    DUP             reduce using rule 22 (fact -> COMMENT .)
    CR              reduce using rule 22 (fact -> COMMENT .)
    SPACE           reduce using rule 22 (fact -> COMMENT .)
    SPACES          reduce using rule 22 (fact -> COMMENT .)
    SWAP            reduce using rule 22 (fact -> COMMENT .)
    KEY             reduce using rule 22 (fact -> COMMENT .)
    DEPTH           reduce using rule 22 (fact -> COMMENT .)
    DROP            reduce using rule 22 (fact -> COMMENT .)
    $end            reduce using rule 22 (fact -> COMMENT .)
    ELSE            reduce using rule 22 (fact -> COMMENT .)
    LOOP            reduce using rule 22 (fact -> COMMENT .)
    PLUSLOOP        reduce using rule 22 (fact -> COMMENT .)
    ;               reduce using rule 22 (fact -> COMMENT .)
    THEN            reduce using rule 22 (fact -> COMMENT .)


state 14

    (23) fact -> . .

    :               reduce using rule 23 (fact -> . .)
    IF              reduce using rule 23 (fact -> . .)
    OPR             reduce using rule 23 (fact -> . .)
    INT             reduce using rule 23 (fact -> . .)
    WORD            reduce using rule 23 (fact -> . .)
    COMMENT         reduce using rule 23 (fact -> . .)
    .               reduce using rule 23 (fact -> . .)
    DOTQUOTE        reduce using rule 23 (fact -> . .)
    EMIT            reduce using rule 23 (fact -> . .)
    CHAR            reduce using rule 23 (fact -> . .)
    DUP             reduce using rule 23 (fact -> . .)
    CR              reduce using rule 23 (fact -> . .)
    SPACE           reduce using rule 23 (fact -> . .)
    SPACES          reduce using rule 23 (fact -> . .)
    SWAP            reduce using rule 23 (fact -> . .)
    KEY             reduce using rule 23 (fact -> . .)
    DEPTH           reduce using rule 23 (fact -> . .)
    DROP            reduce using rule 23 (fact -> . .)
    $end            reduce using rule 23 (fact -> . .)
    ELSE            reduce using rule 23 (fact -> . .)
    LOOP            reduce using rule 23 (fact -> . .)
    PLUSLOOP        reduce using rule 23 (fact -> . .)
    ;               reduce using rule 23 (fact -> . .)
    THEN            reduce using rule 23 (fact -> . .)


state 15

    (24) fact -> DOTQUOTE .

    :               reduce using rule 24 (fact -> DOTQUOTE .)
    IF              reduce using rule 24 (fact -> DOTQUOTE .)
    OPR             reduce using rule 24 (fact -> DOTQUOTE .)
    INT             reduce using rule 24 (fact -> DOTQUOTE .)
    WORD            reduce using rule 24 (fact -> DOTQUOTE .)
    COMMENT         reduce using rule 24 (fact -> DOTQUOTE .)
    .               reduce using rule 24 (fact -> DOTQUOTE .)
    DOTQUOTE        reduce using rule 24 (fact -> DOTQUOTE .)
    EMIT            reduce using rule 24 (fact -> DOTQUOTE .)
    CHAR            reduce using rule 24 (fact -> DOTQUOTE .)
    DUP             reduce using rule 24 (fact -> DOTQUOTE .)
    CR              reduce using rule 24 (fact -> DOTQUOTE .)
    SPACE           reduce using rule 24 (fact -> DOTQUOTE .)
    SPACES          reduce using rule 24 (fact -> DOTQUOTE .)
    SWAP            reduce using rule 24 (fact -> DOTQUOTE .)
    KEY             reduce using rule 24 (fact -> DOTQUOTE .)
    DEPTH           reduce using rule 24 (fact -> DOTQUOTE .)
    DROP            reduce using rule 24 (fact -> DOTQUOTE .)
    $end            reduce using rule 24 (fact -> DOTQUOTE .)
    ELSE            reduce using rule 24 (fact -> DOTQUOTE .)
    LOOP            reduce using rule 24 (fact -> DOTQUOTE .)
    PLUSLOOP        reduce using rule 24 (fact -> DOTQUOTE .)
    ;               reduce using rule 24 (fact -> DOTQUOTE .)
    THEN            reduce using rule 24 (fact -> DOTQUOTE .)


state 16

    (25) fact -> EMIT .

    :               reduce using rule 25 (fact -> EMIT .)
    IF              reduce using rule 25 (fact -> EMIT .)
    OPR             reduce using rule 25 (fact -> EMIT .)
    INT             reduce using rule 25 (fact -> EMIT .)
    WORD            reduce using rule 25 (fact -> EMIT .)
    COMMENT         reduce using rule 25 (fact -> EMIT .)
    .               reduce using rule 25 (fact -> EMIT .)
    DOTQUOTE        reduce using rule 25 (fact -> EMIT .)
    EMIT            reduce using rule 25 (fact -> EMIT .)
    CHAR            reduce using rule 25 (fact -> EMIT .)
    DUP             reduce using rule 25 (fact -> EMIT .)
    CR              reduce using rule 25 (fact -> EMIT .)
    SPACE           reduce using rule 25 (fact -> EMIT .)
    SPACES          reduce using rule 25 (fact -> EMIT .)
    SWAP            reduce using rule 25 (fact -> EMIT .)
    KEY             reduce using rule 25 (fact -> EMIT .)
    DEPTH           reduce using rule 25 (fact -> EMIT .)
    DROP            reduce using rule 25 (fact -> EMIT .)
    $end            reduce using rule 25 (fact -> EMIT .)
    ELSE            reduce using rule 25 (fact -> EMIT .)
    LOOP            reduce using rule 25 (fact -> EMIT .)
    PLUSLOOP        reduce using rule 25 (fact -> EMIT .)
    ;               reduce using rule 25 (fact -> EMIT .)
    THEN            reduce using rule 25 (fact -> EMIT .)


state 17

    (26) fact -> CHAR .

    :               reduce using rule 26 (fact -> CHAR .)
    IF              reduce using rule 26 (fact -> CHAR .)
    OPR             reduce using rule 26 (fact -> CHAR .)
    INT             reduce using rule 26 (fact -> CHAR .)
    WORD            reduce using rule 26 (fact -> CHAR .)
    COMMENT         reduce using rule 26 (fact -> CHAR .)
    .               reduce using rule 26 (fact -> CHAR .)
    DOTQUOTE        reduce using rule 26 (fact -> CHAR .)
    EMIT            reduce using rule 26 (fact -> CHAR .)
    CHAR            reduce using rule 26 (fact -> CHAR .)
    DUP             reduce using rule 26 (fact -> CHAR .)
    CR              reduce using rule 26 (fact -> CHAR .)
    SPACE           reduce using rule 26 (fact -> CHAR .)
    SPACES          reduce using rule 26 (fact -> CHAR .)
    SWAP            reduce using rule 26 (fact -> CHAR .)
    KEY             reduce using rule 26 (fact -> CHAR .)
    DEPTH           reduce using rule 26 (fact -> CHAR .)
    DROP            reduce using rule 26 (fact -> CHAR .)
    $end            reduce using rule 26 (fact -> CHAR .)
    ELSE            reduce using rule 26 (fact -> CHAR .)
    LOOP            reduce using rule 26 (fact -> CHAR .)
    PLUSLOOP        reduce using rule 26 (fact -> CHAR .)
    ;               reduce using rule 26 (fact -> CHAR .)
    THEN            reduce using rule 26 (fact -> CHAR .)


state 18

    (27) fact -> DUP .

    :               reduce using rule 27 (fact -> DUP .)
    IF              reduce using rule 27 (fact -> DUP .)
    OPR             reduce using rule 27 (fact -> DUP .)
    INT             reduce using rule 27 (fact -> DUP .)
    WORD            reduce using rule 27 (fact -> DUP .)
    COMMENT         reduce using rule 27 (fact -> DUP .)
    .               reduce using rule 27 (fact -> DUP .)
    DOTQUOTE        reduce using rule 27 (fact -> DUP .)
    EMIT            reduce using rule 27 (fact -> DUP .)
    CHAR            reduce using rule 27 (fact -> DUP .)
    DUP             reduce using rule 27 (fact -> DUP .)
    CR              reduce using rule 27 (fact -> DUP .)
    SPACE           reduce using rule 27 (fact -> DUP .)
    SPACES          reduce using rule 27 (fact -> DUP .)
    SWAP            reduce using rule 27 (fact -> DUP .)
    KEY             reduce using rule 27 (fact -> DUP .)
    DEPTH           reduce using rule 27 (fact -> DUP .)
    DROP            reduce using rule 27 (fact -> DUP .)
    $end            reduce using rule 27 (fact -> DUP .)
    ELSE            reduce using rule 27 (fact -> DUP .)
    LOOP            reduce using rule 27 (fact -> DUP .)
    PLUSLOOP        reduce using rule 27 (fact -> DUP .)
    ;               reduce using rule 27 (fact -> DUP .)
    THEN            reduce using rule 27 (fact -> DUP .)


state 19

    (28) fact -> CR .

    :               reduce using rule 28 (fact -> CR .)
    IF              reduce using rule 28 (fact -> CR .)
    OPR             reduce using rule 28 (fact -> CR .)
    INT             reduce using rule 28 (fact -> CR .)
    WORD            reduce using rule 28 (fact -> CR .)
    COMMENT         reduce using rule 28 (fact -> CR .)
    .               reduce using rule 28 (fact -> CR .)
    DOTQUOTE        reduce using rule 28 (fact -> CR .)
    EMIT            reduce using rule 28 (fact -> CR .)
    CHAR            reduce using rule 28 (fact -> CR .)
    DUP             reduce using rule 28 (fact -> CR .)
    CR              reduce using rule 28 (fact -> CR .)
    SPACE           reduce using rule 28 (fact -> CR .)
    SPACES          reduce using rule 28 (fact -> CR .)
    SWAP            reduce using rule 28 (fact -> CR .)
    KEY             reduce using rule 28 (fact -> CR .)
    DEPTH           reduce using rule 28 (fact -> CR .)
    DROP            reduce using rule 28 (fact -> CR .)
    $end            reduce using rule 28 (fact -> CR .)
    ELSE            reduce using rule 28 (fact -> CR .)
    LOOP            reduce using rule 28 (fact -> CR .)
    PLUSLOOP        reduce using rule 28 (fact -> CR .)
    ;               reduce using rule 28 (fact -> CR .)
    THEN            reduce using rule 28 (fact -> CR .)


state 20

    (29) fact -> SPACE .

    :               reduce using rule 29 (fact -> SPACE .)
    IF              reduce using rule 29 (fact -> SPACE .)
    OPR             reduce using rule 29 (fact -> SPACE .)
    INT             reduce using rule 29 (fact -> SPACE .)
    WORD            reduce using rule 29 (fact -> SPACE .)
    COMMENT         reduce using rule 29 (fact -> SPACE .)
    .               reduce using rule 29 (fact -> SPACE .)
    DOTQUOTE        reduce using rule 29 (fact -> SPACE .)
    EMIT            reduce using rule 29 (fact -> SPACE .)
    CHAR            reduce using rule 29 (fact -> SPACE .)
    DUP             reduce using rule 29 (fact -> SPACE .)
    CR              reduce using rule 29 (fact -> SPACE .)
    SPACE           reduce using rule 29 (fact -> SPACE .)
    SPACES          reduce using rule 29 (fact -> SPACE .)
    SWAP            reduce using rule 29 (fact -> SPACE .)
    KEY             reduce using rule 29 (fact -> SPACE .)
    DEPTH           reduce using rule 29 (fact -> SPACE .)
    DROP            reduce using rule 29 (fact -> SPACE .)
    $end            reduce using rule 29 (fact -> SPACE .)
    ELSE            reduce using rule 29 (fact -> SPACE .)
    LOOP            reduce using rule 29 (fact -> SPACE .)
    PLUSLOOP        reduce using rule 29 (fact -> SPACE .)
    ;               reduce using rule 29 (fact -> SPACE .)
    THEN            reduce using rule 29 (fact -> SPACE .)


state 21

    (30) fact -> SPACES .

    :               reduce using rule 30 (fact -> SPACES .)
    IF              reduce using rule 30 (fact -> SPACES .)
    OPR             reduce using rule 30 (fact -> SPACES .)
    INT             reduce using rule 30 (fact -> SPACES .)
    WORD            reduce using rule 30 (fact -> SPACES .)
    COMMENT         reduce using rule 30 (fact -> SPACES .)
    .               reduce using rule 30 (fact -> SPACES .)
    DOTQUOTE        reduce using rule 30 (fact -> SPACES .)
    EMIT            reduce using rule 30 (fact -> SPACES .)
    CHAR            reduce using rule 30 (fact -> SPACES .)
    DUP             reduce using rule 30 (fact -> SPACES .)
    CR              reduce using rule 30 (fact -> SPACES .)
    SPACE           reduce using rule 30 (fact -> SPACES .)
    SPACES          reduce using rule 30 (fact -> SPACES .)
    SWAP            reduce using rule 30 (fact -> SPACES .)
    KEY             reduce using rule 30 (fact -> SPACES .)
    DEPTH           reduce using rule 30 (fact -> SPACES .)
    DROP            reduce using rule 30 (fact -> SPACES .)
    $end            reduce using rule 30 (fact -> SPACES .)
    ELSE            reduce using rule 30 (fact -> SPACES .)
    LOOP            reduce using rule 30 (fact -> SPACES .)
    PLUSLOOP        reduce using rule 30 (fact -> SPACES .)
    ;               reduce using rule 30 (fact -> SPACES .)
    THEN            reduce using rule 30 (fact -> SPACES .)


state 22

    (31) fact -> SWAP .

    :               reduce using rule 31 (fact -> SWAP .)
    IF              reduce using rule 31 (fact -> SWAP .)
    OPR             reduce using rule 31 (fact -> SWAP .)
    INT             reduce using rule 31 (fact -> SWAP .)
    WORD            reduce using rule 31 (fact -> SWAP .)
    COMMENT         reduce using rule 31 (fact -> SWAP .)
    .               reduce using rule 31 (fact -> SWAP .)
    DOTQUOTE        reduce using rule 31 (fact -> SWAP .)
    EMIT            reduce using rule 31 (fact -> SWAP .)
    CHAR            reduce using rule 31 (fact -> SWAP .)
    DUP             reduce using rule 31 (fact -> SWAP .)
    CR              reduce using rule 31 (fact -> SWAP .)
    SPACE           reduce using rule 31 (fact -> SWAP .)
    SPACES          reduce using rule 31 (fact -> SWAP .)
    SWAP            reduce using rule 31 (fact -> SWAP .)
    KEY             reduce using rule 31 (fact -> SWAP .)
    DEPTH           reduce using rule 31 (fact -> SWAP .)
    DROP            reduce using rule 31 (fact -> SWAP .)
    $end            reduce using rule 31 (fact -> SWAP .)
    ELSE            reduce using rule 31 (fact -> SWAP .)
    LOOP            reduce using rule 31 (fact -> SWAP .)
    PLUSLOOP        reduce using rule 31 (fact -> SWAP .)
    ;               reduce using rule 31 (fact -> SWAP .)
    THEN            reduce using rule 31 (fact -> SWAP .)


state 23

    (32) fact -> KEY .

    :               reduce using rule 32 (fact -> KEY .)
    IF              reduce using rule 32 (fact -> KEY .)
    OPR             reduce using rule 32 (fact -> KEY .)
    INT             reduce using rule 32 (fact -> KEY .)
    WORD            reduce using rule 32 (fact -> KEY .)
    COMMENT         reduce using rule 32 (fact -> KEY .)
    .               reduce using rule 32 (fact -> KEY .)
    DOTQUOTE        reduce using rule 32 (fact -> KEY .)
    EMIT            reduce using rule 32 (fact -> KEY .)
    CHAR            reduce using rule 32 (fact -> KEY .)
    DUP             reduce using rule 32 (fact -> KEY .)
    CR              reduce using rule 32 (fact -> KEY .)
    SPACE           reduce using rule 32 (fact -> KEY .)
    SPACES          reduce using rule 32 (fact -> KEY .)
    SWAP            reduce using rule 32 (fact -> KEY .)
    KEY             reduce using rule 32 (fact -> KEY .)
    DEPTH           reduce using rule 32 (fact -> KEY .)
    DROP            reduce using rule 32 (fact -> KEY .)
    $end            reduce using rule 32 (fact -> KEY .)
    ELSE            reduce using rule 32 (fact -> KEY .)
    LOOP            reduce using rule 32 (fact -> KEY .)
    PLUSLOOP        reduce using rule 32 (fact -> KEY .)
    ;               reduce using rule 32 (fact -> KEY .)
    THEN            reduce using rule 32 (fact -> KEY .)


state 24

    (33) fact -> DEPTH .

    :               reduce using rule 33 (fact -> DEPTH .)
    IF              reduce using rule 33 (fact -> DEPTH .)
    OPR             reduce using rule 33 (fact -> DEPTH .)
    INT             reduce using rule 33 (fact -> DEPTH .)
    WORD            reduce using rule 33 (fact -> DEPTH .)
    COMMENT         reduce using rule 33 (fact -> DEPTH .)
    .               reduce using rule 33 (fact -> DEPTH .)
    DOTQUOTE        reduce using rule 33 (fact -> DEPTH .)
    EMIT            reduce using rule 33 (fact -> DEPTH .)
    CHAR            reduce using rule 33 (fact -> DEPTH .)
    DUP             reduce using rule 33 (fact -> DEPTH .)
    CR              reduce using rule 33 (fact -> DEPTH .)
    SPACE           reduce using rule 33 (fact -> DEPTH .)
    SPACES          reduce using rule 33 (fact -> DEPTH .)
    SWAP            reduce using rule 33 (fact -> DEPTH .)
    KEY             reduce using rule 33 (fact -> DEPTH .)
    DEPTH           reduce using rule 33 (fact -> DEPTH .)
    DROP            reduce using rule 33 (fact -> DEPTH .)
    $end            reduce using rule 33 (fact -> DEPTH .)
    ELSE            reduce using rule 33 (fact -> DEPTH .)
    LOOP            reduce using rule 33 (fact -> DEPTH .)
    PLUSLOOP        reduce using rule 33 (fact -> DEPTH .)
    ;               reduce using rule 33 (fact -> DEPTH .)
    THEN            reduce using rule 33 (fact -> DEPTH .)


state 25

    (34) fact -> DROP .

    :               reduce using rule 34 (fact -> DROP .)
    IF              reduce using rule 34 (fact -> DROP .)
    OPR             reduce using rule 34 (fact -> DROP .)
    INT             reduce using rule 34 (fact -> DROP .)
    WORD            reduce using rule 34 (fact -> DROP .)
    COMMENT         reduce using rule 34 (fact -> DROP .)
    .               reduce using rule 34 (fact -> DROP .)
    DOTQUOTE        reduce using rule 34 (fact -> DROP .)
    EMIT            reduce using rule 34 (fact -> DROP .)
    CHAR            reduce using rule 34 (fact -> DROP .)
    DUP             reduce using rule 34 (fact -> DROP .)
    CR              reduce using rule 34 (fact -> DROP .)
    SPACE           reduce using rule 34 (fact -> DROP .)
    SPACES          reduce using rule 34 (fact -> DROP .)
    SWAP            reduce using rule 34 (fact -> DROP .)
    KEY             reduce using rule 34 (fact -> DROP .)
    DEPTH           reduce using rule 34 (fact -> DROP .)
    DROP            reduce using rule 34 (fact -> DROP .)
    $end            reduce using rule 34 (fact -> DROP .)
    ELSE            reduce using rule 34 (fact -> DROP .)
    LOOP            reduce using rule 34 (fact -> DROP .)
    PLUSLOOP        reduce using rule 34 (fact -> DROP .)
    ;               reduce using rule 34 (fact -> DROP .)
    THEN            reduce using rule 34 (fact -> DROP .)


state 26

    (5) exp -> exp term .

    :               reduce using rule 5 (exp -> exp term .)
    IF              reduce using rule 5 (exp -> exp term .)
    OPR             reduce using rule 5 (exp -> exp term .)
    INT             reduce using rule 5 (exp -> exp term .)
    WORD            reduce using rule 5 (exp -> exp term .)
    COMMENT         reduce using rule 5 (exp -> exp term .)
    .               reduce using rule 5 (exp -> exp term .)
    DOTQUOTE        reduce using rule 5 (exp -> exp term .)
    EMIT            reduce using rule 5 (exp -> exp term .)
    CHAR            reduce using rule 5 (exp -> exp term .)
    DUP             reduce using rule 5 (exp -> exp term .)
    CR              reduce using rule 5 (exp -> exp term .)
    SPACE           reduce using rule 5 (exp -> exp term .)
    SPACES          reduce using rule 5 (exp -> exp term .)
    SWAP            reduce using rule 5 (exp -> exp term .)
    KEY             reduce using rule 5 (exp -> exp term .)
    DEPTH           reduce using rule 5 (exp -> exp term .)
    DROP            reduce using rule 5 (exp -> exp term .)
    $end            reduce using rule 5 (exp -> exp term .)
    ELSE            reduce using rule 5 (exp -> exp term .)
    LOOP            reduce using rule 5 (exp -> exp term .)
    PLUSLOOP        reduce using rule 5 (exp -> exp term .)
    ;               reduce using rule 5 (exp -> exp term .)
    THEN            reduce using rule 5 (exp -> exp term .)


state 27

    (6) exp -> exp function .

    :               reduce using rule 6 (exp -> exp function .)
    IF              reduce using rule 6 (exp -> exp function .)
    OPR             reduce using rule 6 (exp -> exp function .)
    INT             reduce using rule 6 (exp -> exp function .)
    WORD            reduce using rule 6 (exp -> exp function .)
    COMMENT         reduce using rule 6 (exp -> exp function .)
    .               reduce using rule 6 (exp -> exp function .)
    DOTQUOTE        reduce using rule 6 (exp -> exp function .)
    EMIT            reduce using rule 6 (exp -> exp function .)
    CHAR            reduce using rule 6 (exp -> exp function .)
    DUP             reduce using rule 6 (exp -> exp function .)
    CR              reduce using rule 6 (exp -> exp function .)
    SPACE           reduce using rule 6 (exp -> exp function .)
    SPACES          reduce using rule 6 (exp -> exp function .)
    SWAP            reduce using rule 6 (exp -> exp function .)
    KEY             reduce using rule 6 (exp -> exp function .)
    DEPTH           reduce using rule 6 (exp -> exp function .)
    DROP            reduce using rule 6 (exp -> exp function .)
    $end            reduce using rule 6 (exp -> exp function .)
    ELSE            reduce using rule 6 (exp -> exp function .)
    LOOP            reduce using rule 6 (exp -> exp function .)
    PLUSLOOP        reduce using rule 6 (exp -> exp function .)
    ;               reduce using rule 6 (exp -> exp function .)
    THEN            reduce using rule 6 (exp -> exp function .)


state 28

    (7) exp -> exp conditional .

    :               reduce using rule 7 (exp -> exp conditional .)
    IF              reduce using rule 7 (exp -> exp conditional .)
    OPR             reduce using rule 7 (exp -> exp conditional .)
    INT             reduce using rule 7 (exp -> exp conditional .)
    WORD            reduce using rule 7 (exp -> exp conditional .)
    COMMENT         reduce using rule 7 (exp -> exp conditional .)
    .               reduce using rule 7 (exp -> exp conditional .)
    DOTQUOTE        reduce using rule 7 (exp -> exp conditional .)
    EMIT            reduce using rule 7 (exp -> exp conditional .)
    CHAR            reduce using rule 7 (exp -> exp conditional .)
    DUP             reduce using rule 7 (exp -> exp conditional .)
    CR              reduce using rule 7 (exp -> exp conditional .)
    SPACE           reduce using rule 7 (exp -> exp conditional .)
    SPACES          reduce using rule 7 (exp -> exp conditional .)
    SWAP            reduce using rule 7 (exp -> exp conditional .)
    KEY             reduce using rule 7 (exp -> exp conditional .)
    DEPTH           reduce using rule 7 (exp -> exp conditional .)
    DROP            reduce using rule 7 (exp -> exp conditional .)
    $end            reduce using rule 7 (exp -> exp conditional .)
    ELSE            reduce using rule 7 (exp -> exp conditional .)
    LOOP            reduce using rule 7 (exp -> exp conditional .)
    PLUSLOOP        reduce using rule 7 (exp -> exp conditional .)
    ;               reduce using rule 7 (exp -> exp conditional .)
    THEN            reduce using rule 7 (exp -> exp conditional .)


state 29

    (9) function -> : NAME . ;
    (10) function -> : NAME . exp ;
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . exp term
    (6) exp -> . exp function
    (7) exp -> . exp conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (15) loop -> . DO LOOP
    (16) loop -> . DO exp LOOP
    (17) loop -> . DO PLUSLOOP
    (18) loop -> . DO exp PLUSLOOP
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    ;               shift and go to state 35
    :               shift and go to state 7
    IF              shift and go to state 8
    DO              shift and go to state 9
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    exp                            shift and go to state 36
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    fact                           shift and go to state 6

state 30

    (11) conditional -> IF ELSE . THEN
    (13) conditional -> IF ELSE . exp THEN
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . exp term
    (6) exp -> . exp function
    (7) exp -> . exp conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (15) loop -> . DO LOOP
    (16) loop -> . DO exp LOOP
    (17) loop -> . DO PLUSLOOP
    (18) loop -> . DO exp PLUSLOOP
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    THEN            shift and go to state 37
    :               shift and go to state 7
    IF              shift and go to state 8
    DO              shift and go to state 9
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    exp                            shift and go to state 38
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    fact                           shift and go to state 6

state 31

    (12) conditional -> IF exp . ELSE THEN
    (14) conditional -> IF exp . ELSE exp THEN
    (5) exp -> exp . term
    (6) exp -> exp . function
    (7) exp -> exp . conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    ELSE            shift and go to state 39
    :               shift and go to state 7
    IF              shift and go to state 8
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    term                           shift and go to state 26
    function                       shift and go to state 27
    conditional                    shift and go to state 28
    fact                           shift and go to state 6

state 32

    (15) loop -> DO LOOP .

    :               reduce using rule 15 (loop -> DO LOOP .)
    IF              reduce using rule 15 (loop -> DO LOOP .)
    OPR             reduce using rule 15 (loop -> DO LOOP .)
    INT             reduce using rule 15 (loop -> DO LOOP .)
    WORD            reduce using rule 15 (loop -> DO LOOP .)
    COMMENT         reduce using rule 15 (loop -> DO LOOP .)
    .               reduce using rule 15 (loop -> DO LOOP .)
    DOTQUOTE        reduce using rule 15 (loop -> DO LOOP .)
    EMIT            reduce using rule 15 (loop -> DO LOOP .)
    CHAR            reduce using rule 15 (loop -> DO LOOP .)
    DUP             reduce using rule 15 (loop -> DO LOOP .)
    CR              reduce using rule 15 (loop -> DO LOOP .)
    SPACE           reduce using rule 15 (loop -> DO LOOP .)
    SPACES          reduce using rule 15 (loop -> DO LOOP .)
    SWAP            reduce using rule 15 (loop -> DO LOOP .)
    KEY             reduce using rule 15 (loop -> DO LOOP .)
    DEPTH           reduce using rule 15 (loop -> DO LOOP .)
    DROP            reduce using rule 15 (loop -> DO LOOP .)
    $end            reduce using rule 15 (loop -> DO LOOP .)
    ELSE            reduce using rule 15 (loop -> DO LOOP .)
    LOOP            reduce using rule 15 (loop -> DO LOOP .)
    PLUSLOOP        reduce using rule 15 (loop -> DO LOOP .)
    ;               reduce using rule 15 (loop -> DO LOOP .)
    THEN            reduce using rule 15 (loop -> DO LOOP .)


state 33

    (16) loop -> DO exp . LOOP
    (18) loop -> DO exp . PLUSLOOP
    (5) exp -> exp . term
    (6) exp -> exp . function
    (7) exp -> exp . conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    LOOP            shift and go to state 40
    PLUSLOOP        shift and go to state 41
    :               shift and go to state 7
    IF              shift and go to state 8
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    term                           shift and go to state 26
    function                       shift and go to state 27
    conditional                    shift and go to state 28
    fact                           shift and go to state 6

state 34

    (17) loop -> DO PLUSLOOP .

    :               reduce using rule 17 (loop -> DO PLUSLOOP .)
    IF              reduce using rule 17 (loop -> DO PLUSLOOP .)
    OPR             reduce using rule 17 (loop -> DO PLUSLOOP .)
    INT             reduce using rule 17 (loop -> DO PLUSLOOP .)
    WORD            reduce using rule 17 (loop -> DO PLUSLOOP .)
    COMMENT         reduce using rule 17 (loop -> DO PLUSLOOP .)
    .               reduce using rule 17 (loop -> DO PLUSLOOP .)
    DOTQUOTE        reduce using rule 17 (loop -> DO PLUSLOOP .)
    EMIT            reduce using rule 17 (loop -> DO PLUSLOOP .)
    CHAR            reduce using rule 17 (loop -> DO PLUSLOOP .)
    DUP             reduce using rule 17 (loop -> DO PLUSLOOP .)
    CR              reduce using rule 17 (loop -> DO PLUSLOOP .)
    SPACE           reduce using rule 17 (loop -> DO PLUSLOOP .)
    SPACES          reduce using rule 17 (loop -> DO PLUSLOOP .)
    SWAP            reduce using rule 17 (loop -> DO PLUSLOOP .)
    KEY             reduce using rule 17 (loop -> DO PLUSLOOP .)
    DEPTH           reduce using rule 17 (loop -> DO PLUSLOOP .)
    DROP            reduce using rule 17 (loop -> DO PLUSLOOP .)
    $end            reduce using rule 17 (loop -> DO PLUSLOOP .)
    ELSE            reduce using rule 17 (loop -> DO PLUSLOOP .)
    LOOP            reduce using rule 17 (loop -> DO PLUSLOOP .)
    PLUSLOOP        reduce using rule 17 (loop -> DO PLUSLOOP .)
    ;               reduce using rule 17 (loop -> DO PLUSLOOP .)
    THEN            reduce using rule 17 (loop -> DO PLUSLOOP .)


state 35

    (9) function -> : NAME ; .

    :               reduce using rule 9 (function -> : NAME ; .)
    IF              reduce using rule 9 (function -> : NAME ; .)
    OPR             reduce using rule 9 (function -> : NAME ; .)
    INT             reduce using rule 9 (function -> : NAME ; .)
    WORD            reduce using rule 9 (function -> : NAME ; .)
    COMMENT         reduce using rule 9 (function -> : NAME ; .)
    .               reduce using rule 9 (function -> : NAME ; .)
    DOTQUOTE        reduce using rule 9 (function -> : NAME ; .)
    EMIT            reduce using rule 9 (function -> : NAME ; .)
    CHAR            reduce using rule 9 (function -> : NAME ; .)
    DUP             reduce using rule 9 (function -> : NAME ; .)
    CR              reduce using rule 9 (function -> : NAME ; .)
    SPACE           reduce using rule 9 (function -> : NAME ; .)
    SPACES          reduce using rule 9 (function -> : NAME ; .)
    SWAP            reduce using rule 9 (function -> : NAME ; .)
    KEY             reduce using rule 9 (function -> : NAME ; .)
    DEPTH           reduce using rule 9 (function -> : NAME ; .)
    DROP            reduce using rule 9 (function -> : NAME ; .)
    $end            reduce using rule 9 (function -> : NAME ; .)
    ELSE            reduce using rule 9 (function -> : NAME ; .)
    LOOP            reduce using rule 9 (function -> : NAME ; .)
    PLUSLOOP        reduce using rule 9 (function -> : NAME ; .)
    ;               reduce using rule 9 (function -> : NAME ; .)
    THEN            reduce using rule 9 (function -> : NAME ; .)


state 36

    (10) function -> : NAME exp . ;
    (5) exp -> exp . term
    (6) exp -> exp . function
    (7) exp -> exp . conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    ;               shift and go to state 42
    :               shift and go to state 7
    IF              shift and go to state 8
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    term                           shift and go to state 26
    function                       shift and go to state 27
    conditional                    shift and go to state 28
    fact                           shift and go to state 6

state 37

    (11) conditional -> IF ELSE THEN .

    :               reduce using rule 11 (conditional -> IF ELSE THEN .)
    IF              reduce using rule 11 (conditional -> IF ELSE THEN .)
    OPR             reduce using rule 11 (conditional -> IF ELSE THEN .)
    INT             reduce using rule 11 (conditional -> IF ELSE THEN .)
    WORD            reduce using rule 11 (conditional -> IF ELSE THEN .)
    COMMENT         reduce using rule 11 (conditional -> IF ELSE THEN .)
    .               reduce using rule 11 (conditional -> IF ELSE THEN .)
    DOTQUOTE        reduce using rule 11 (conditional -> IF ELSE THEN .)
    EMIT            reduce using rule 11 (conditional -> IF ELSE THEN .)
    CHAR            reduce using rule 11 (conditional -> IF ELSE THEN .)
    DUP             reduce using rule 11 (conditional -> IF ELSE THEN .)
    CR              reduce using rule 11 (conditional -> IF ELSE THEN .)
    SPACE           reduce using rule 11 (conditional -> IF ELSE THEN .)
    SPACES          reduce using rule 11 (conditional -> IF ELSE THEN .)
    SWAP            reduce using rule 11 (conditional -> IF ELSE THEN .)
    KEY             reduce using rule 11 (conditional -> IF ELSE THEN .)
    DEPTH           reduce using rule 11 (conditional -> IF ELSE THEN .)
    DROP            reduce using rule 11 (conditional -> IF ELSE THEN .)
    $end            reduce using rule 11 (conditional -> IF ELSE THEN .)
    ELSE            reduce using rule 11 (conditional -> IF ELSE THEN .)
    LOOP            reduce using rule 11 (conditional -> IF ELSE THEN .)
    PLUSLOOP        reduce using rule 11 (conditional -> IF ELSE THEN .)
    ;               reduce using rule 11 (conditional -> IF ELSE THEN .)
    THEN            reduce using rule 11 (conditional -> IF ELSE THEN .)


state 38

    (13) conditional -> IF ELSE exp . THEN
    (5) exp -> exp . term
    (6) exp -> exp . function
    (7) exp -> exp . conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    THEN            shift and go to state 43
    :               shift and go to state 7
    IF              shift and go to state 8
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    term                           shift and go to state 26
    function                       shift and go to state 27
    conditional                    shift and go to state 28
    fact                           shift and go to state 6

state 39

    (12) conditional -> IF exp ELSE . THEN
    (14) conditional -> IF exp ELSE . exp THEN
    (1) exp -> . term
    (2) exp -> . function
    (3) exp -> . conditional
    (4) exp -> . loop
    (5) exp -> . exp term
    (6) exp -> . exp function
    (7) exp -> . exp conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (15) loop -> . DO LOOP
    (16) loop -> . DO exp LOOP
    (17) loop -> . DO PLUSLOOP
    (18) loop -> . DO exp PLUSLOOP
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    THEN            shift and go to state 45
    :               shift and go to state 7
    IF              shift and go to state 8
    DO              shift and go to state 9
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    exp                            shift and go to state 44
    term                           shift and go to state 2
    function                       shift and go to state 3
    conditional                    shift and go to state 4
    loop                           shift and go to state 5
    fact                           shift and go to state 6

state 40

    (16) loop -> DO exp LOOP .

    :               reduce using rule 16 (loop -> DO exp LOOP .)
    IF              reduce using rule 16 (loop -> DO exp LOOP .)
    OPR             reduce using rule 16 (loop -> DO exp LOOP .)
    INT             reduce using rule 16 (loop -> DO exp LOOP .)
    WORD            reduce using rule 16 (loop -> DO exp LOOP .)
    COMMENT         reduce using rule 16 (loop -> DO exp LOOP .)
    .               reduce using rule 16 (loop -> DO exp LOOP .)
    DOTQUOTE        reduce using rule 16 (loop -> DO exp LOOP .)
    EMIT            reduce using rule 16 (loop -> DO exp LOOP .)
    CHAR            reduce using rule 16 (loop -> DO exp LOOP .)
    DUP             reduce using rule 16 (loop -> DO exp LOOP .)
    CR              reduce using rule 16 (loop -> DO exp LOOP .)
    SPACE           reduce using rule 16 (loop -> DO exp LOOP .)
    SPACES          reduce using rule 16 (loop -> DO exp LOOP .)
    SWAP            reduce using rule 16 (loop -> DO exp LOOP .)
    KEY             reduce using rule 16 (loop -> DO exp LOOP .)
    DEPTH           reduce using rule 16 (loop -> DO exp LOOP .)
    DROP            reduce using rule 16 (loop -> DO exp LOOP .)
    $end            reduce using rule 16 (loop -> DO exp LOOP .)
    ELSE            reduce using rule 16 (loop -> DO exp LOOP .)
    LOOP            reduce using rule 16 (loop -> DO exp LOOP .)
    PLUSLOOP        reduce using rule 16 (loop -> DO exp LOOP .)
    ;               reduce using rule 16 (loop -> DO exp LOOP .)
    THEN            reduce using rule 16 (loop -> DO exp LOOP .)


state 41

    (18) loop -> DO exp PLUSLOOP .

    :               reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    IF              reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    OPR             reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    INT             reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    WORD            reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    COMMENT         reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    .               reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    DOTQUOTE        reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    EMIT            reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    CHAR            reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    DUP             reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    CR              reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    SPACE           reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    SPACES          reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    SWAP            reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    KEY             reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    DEPTH           reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    DROP            reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    $end            reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    ELSE            reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    LOOP            reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    PLUSLOOP        reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    ;               reduce using rule 18 (loop -> DO exp PLUSLOOP .)
    THEN            reduce using rule 18 (loop -> DO exp PLUSLOOP .)


state 42

    (10) function -> : NAME exp ; .

    :               reduce using rule 10 (function -> : NAME exp ; .)
    IF              reduce using rule 10 (function -> : NAME exp ; .)
    OPR             reduce using rule 10 (function -> : NAME exp ; .)
    INT             reduce using rule 10 (function -> : NAME exp ; .)
    WORD            reduce using rule 10 (function -> : NAME exp ; .)
    COMMENT         reduce using rule 10 (function -> : NAME exp ; .)
    .               reduce using rule 10 (function -> : NAME exp ; .)
    DOTQUOTE        reduce using rule 10 (function -> : NAME exp ; .)
    EMIT            reduce using rule 10 (function -> : NAME exp ; .)
    CHAR            reduce using rule 10 (function -> : NAME exp ; .)
    DUP             reduce using rule 10 (function -> : NAME exp ; .)
    CR              reduce using rule 10 (function -> : NAME exp ; .)
    SPACE           reduce using rule 10 (function -> : NAME exp ; .)
    SPACES          reduce using rule 10 (function -> : NAME exp ; .)
    SWAP            reduce using rule 10 (function -> : NAME exp ; .)
    KEY             reduce using rule 10 (function -> : NAME exp ; .)
    DEPTH           reduce using rule 10 (function -> : NAME exp ; .)
    DROP            reduce using rule 10 (function -> : NAME exp ; .)
    $end            reduce using rule 10 (function -> : NAME exp ; .)
    ELSE            reduce using rule 10 (function -> : NAME exp ; .)
    LOOP            reduce using rule 10 (function -> : NAME exp ; .)
    PLUSLOOP        reduce using rule 10 (function -> : NAME exp ; .)
    ;               reduce using rule 10 (function -> : NAME exp ; .)
    THEN            reduce using rule 10 (function -> : NAME exp ; .)


state 43

    (13) conditional -> IF ELSE exp THEN .

    :               reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    IF              reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    OPR             reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    INT             reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    WORD            reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    COMMENT         reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    .               reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    DOTQUOTE        reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    EMIT            reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    CHAR            reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    DUP             reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    CR              reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    SPACE           reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    SPACES          reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    SWAP            reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    KEY             reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    DEPTH           reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    DROP            reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    $end            reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    ELSE            reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    LOOP            reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    PLUSLOOP        reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    ;               reduce using rule 13 (conditional -> IF ELSE exp THEN .)
    THEN            reduce using rule 13 (conditional -> IF ELSE exp THEN .)


state 44

    (14) conditional -> IF exp ELSE exp . THEN
    (5) exp -> exp . term
    (6) exp -> exp . function
    (7) exp -> exp . conditional
    (8) term -> . fact
    (9) function -> . : NAME ;
    (10) function -> . : NAME exp ;
    (11) conditional -> . IF ELSE THEN
    (12) conditional -> . IF exp ELSE THEN
    (13) conditional -> . IF ELSE exp THEN
    (14) conditional -> . IF exp ELSE exp THEN
    (19) fact -> . OPR
    (20) fact -> . INT
    (21) fact -> . WORD
    (22) fact -> . COMMENT
    (23) fact -> . .
    (24) fact -> . DOTQUOTE
    (25) fact -> . EMIT
    (26) fact -> . CHAR
    (27) fact -> . DUP
    (28) fact -> . CR
    (29) fact -> . SPACE
    (30) fact -> . SPACES
    (31) fact -> . SWAP
    (32) fact -> . KEY
    (33) fact -> . DEPTH
    (34) fact -> . DROP

    THEN            shift and go to state 46
    :               shift and go to state 7
    IF              shift and go to state 8
    OPR             shift and go to state 10
    INT             shift and go to state 11
    WORD            shift and go to state 12
    COMMENT         shift and go to state 13
    .               shift and go to state 14
    DOTQUOTE        shift and go to state 15
    EMIT            shift and go to state 16
    CHAR            shift and go to state 17
    DUP             shift and go to state 18
    CR              shift and go to state 19
    SPACE           shift and go to state 20
    SPACES          shift and go to state 21
    SWAP            shift and go to state 22
    KEY             shift and go to state 23
    DEPTH           shift and go to state 24
    DROP            shift and go to state 25

    term                           shift and go to state 26
    function                       shift and go to state 27
    conditional                    shift and go to state 28
    fact                           shift and go to state 6

state 45

    (12) conditional -> IF exp ELSE THEN .

    :               reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    IF              reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    OPR             reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    INT             reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    WORD            reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    COMMENT         reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    .               reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    DOTQUOTE        reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    EMIT            reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    CHAR            reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    DUP             reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    CR              reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    SPACE           reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    SPACES          reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    SWAP            reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    KEY             reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    DEPTH           reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    DROP            reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    $end            reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    ELSE            reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    LOOP            reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    PLUSLOOP        reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    ;               reduce using rule 12 (conditional -> IF exp ELSE THEN .)
    THEN            reduce using rule 12 (conditional -> IF exp ELSE THEN .)


state 46

    (14) conditional -> IF exp ELSE exp THEN .

    :               reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    IF              reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    OPR             reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    INT             reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    WORD            reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    COMMENT         reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    .               reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    DOTQUOTE        reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    EMIT            reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    CHAR            reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    DUP             reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    CR              reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    SPACE           reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    SPACES          reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    SWAP            reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    KEY             reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    DEPTH           reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    DROP            reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    $end            reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    ELSE            reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    LOOP            reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    PLUSLOOP        reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    ;               reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)
    THEN            reduce using rule 14 (conditional -> IF exp ELSE exp THEN .)

